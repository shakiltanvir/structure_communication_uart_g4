
structure_slave_communication_uart_g4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004658  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004830  08004830  00014830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004870  08004870  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004870  08004870  00014870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004878  08004878  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004878  08004878  00014878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800487c  0800487c  0001487c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  2000000c  0800488c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  0800488c  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d648  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f91  00000000  00000000  0002d6c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a28  00000000  00000000  0002f658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007cb  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cd68  00000000  00000000  0003084b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d333  00000000  00000000  0004d5b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b5e53  00000000  00000000  0005a8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002894  00000000  00000000  0011073c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00112fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004818 	.word	0x08004818

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004818 	.word	0x08004818

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_UARTEx_RxEventCallback>:



// Callback function for UART reception event
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	460b      	mov	r3, r1
 800051e:	807b      	strh	r3, [r7, #2]
	//data received
    // Convert byte array to structure
    memcpy(&rxData, rxBuff, sizeof(rxData));
 8000520:	4a1c      	ldr	r2, [pc, #112]	; (8000594 <HAL_UARTEx_RxEventCallback+0x80>)
 8000522:	4b1d      	ldr	r3, [pc, #116]	; (8000598 <HAL_UARTEx_RxEventCallback+0x84>)
 8000524:	4614      	mov	r4, r2
 8000526:	461d      	mov	r5, r3
 8000528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052c:	682b      	ldr	r3, [r5, #0]
 800052e:	6023      	str	r3, [r4, #0]
    // Verify checksum
    if (rxData.checkSum != calculateChecksum(rxData.err)) {
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <HAL_UARTEx_RxEventCallback+0x80>)
 8000532:	691c      	ldr	r4, [r3, #16]
 8000534:	4b17      	ldr	r3, [pc, #92]	; (8000594 <HAL_UARTEx_RxEventCallback+0x80>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4618      	mov	r0, r3
 800053a:	f000 f84d 	bl	80005d8 <calculateChecksum>
 800053e:	4603      	mov	r3, r0
 8000540:	429c      	cmp	r4, r3
 8000542:	d004      	beq.n	800054e <HAL_UARTEx_RxEventCallback+0x3a>
        // If checksum mismatch detected, handle error
        // For example, setting error values
		memset(&rxData, '0', sizeof(rxData));
 8000544:	2214      	movs	r2, #20
 8000546:	2130      	movs	r1, #48	; 0x30
 8000548:	4812      	ldr	r0, [pc, #72]	; (8000594 <HAL_UARTEx_RxEventCallback+0x80>)
 800054a:	f004 f92b 	bl	80047a4 <memset>
    }


    // Populate data structure with error value
    txData.perchenterror = -56.6;
 800054e:	4b13      	ldr	r3, [pc, #76]	; (800059c <HAL_UARTEx_RxEventCallback+0x88>)
 8000550:	4a13      	ldr	r2, [pc, #76]	; (80005a0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000552:	605a      	str	r2, [r3, #4]
    txData.number = 50650;
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <HAL_UARTEx_RxEventCallback+0x88>)
 8000556:	f24c 52da 	movw	r2, #50650	; 0xc5da
 800055a:	609a      	str	r2, [r3, #8]
    txData.onebyte = 0x3F;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <HAL_UARTEx_RxEventCallback+0x88>)
 800055e:	223f      	movs	r2, #63	; 0x3f
 8000560:	731a      	strb	r2, [r3, #12]
	txData.err = 50; // Example value
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <HAL_UARTEx_RxEventCallback+0x88>)
 8000564:	2232      	movs	r2, #50	; 0x32
 8000566:	601a      	str	r2, [r3, #0]
    txData.checkSum = calculateChecksum(txData.err);
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <HAL_UARTEx_RxEventCallback+0x88>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f833 	bl	80005d8 <calculateChecksum>
 8000572:	4603      	mov	r3, r0
 8000574:	4a09      	ldr	r2, [pc, #36]	; (800059c <HAL_UARTEx_RxEventCallback+0x88>)
 8000576:	6113      	str	r3, [r2, #16]


    sendData(&txData);
 8000578:	4808      	ldr	r0, [pc, #32]	; (800059c <HAL_UARTEx_RxEventCallback+0x88>)
 800057a:	f000 f815 	bl	80005a8 <sendData>

    // Start listening for next incoming data
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxBuff, BUFF_SIZE);
 800057e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000582:	4905      	ldr	r1, [pc, #20]	; (8000598 <HAL_UARTEx_RxEventCallback+0x84>)
 8000584:	4807      	ldr	r0, [pc, #28]	; (80005a4 <HAL_UARTEx_RxEventCallback+0x90>)
 8000586:	f004 f86e 	bl	8004666 <HAL_UARTEx_ReceiveToIdle_IT>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bdb0      	pop	{r4, r5, r7, pc}
 8000592:	bf00      	nop
 8000594:	200002d0 	.word	0x200002d0
 8000598:	20000128 	.word	0x20000128
 800059c:	200002bc 	.word	0x200002bc
 80005a0:	c2626666 	.word	0xc2626666
 80005a4:	20000228 	.word	0x20000228

080005a8 <sendData>:



// Function to send data over UART
void sendData(myData *data){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

    // Convert structure to byte array
    // Convert structure to byte array
    memcpy(txBuff, data, sizeof(txData));
 80005b0:	2214      	movs	r2, #20
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	4806      	ldr	r0, [pc, #24]	; (80005d0 <sendData+0x28>)
 80005b6:	f004 f921 	bl	80047fc <memcpy>

    // Transmit data
    HAL_UART_Transmit_IT(&huart1, txBuff, sizeof(txBuff));
 80005ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005be:	4904      	ldr	r1, [pc, #16]	; (80005d0 <sendData+0x28>)
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <sendData+0x2c>)
 80005c2:	f001 fe99 	bl	80022f8 <HAL_UART_Transmit_IT>

    /*****************Send Data Information*******************/
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000028 	.word	0x20000028
 80005d4:	20000228 	.word	0x20000228

080005d8 <calculateChecksum>:


// Function to convert a uint32_t number to its two's complement representation
uint32_t calculateChecksum(uint32_t num) {
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    // Flip all the bits
    num = ~num;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	43db      	mvns	r3, r3
 80005e4:	607b      	str	r3, [r7, #4]
    // Add 1 to the least significant bit
    num += 1;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3301      	adds	r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
    return num;
 80005ec:	687b      	ldr	r3, [r7, #4]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <uartcomInit>:


// Initialization function for UART communication
void uartcomInit(void){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	// Start listening for incoming data
	  HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxBuff, BUFF_SIZE);
 8000600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000604:	4905      	ldr	r1, [pc, #20]	; (800061c <uartcomInit+0x20>)
 8000606:	4806      	ldr	r0, [pc, #24]	; (8000620 <uartcomInit+0x24>)
 8000608:	f004 f82d 	bl	8004666 <HAL_UARTEx_ReceiveToIdle_IT>
	// Transmit initial data (if needed)
	  HAL_UART_Transmit_IT(&huart1, txBuff, sizeof(txBuff));
 800060c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000610:	4904      	ldr	r1, [pc, #16]	; (8000624 <uartcomInit+0x28>)
 8000612:	4803      	ldr	r0, [pc, #12]	; (8000620 <uartcomInit+0x24>)
 8000614:	f001 fe70 	bl	80022f8 <HAL_UART_Transmit_IT>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000128 	.word	0x20000128
 8000620:	20000228 	.word	0x20000228
 8000624:	20000028 	.word	0x20000028

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fa67 	bl	8000afe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f809 	bl	8000646 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 f8ea 	bl	800080c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000638:	f000 f89c 	bl	8000774 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800063c:	f000 f84e 	bl	80006dc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uartcomInit();
 8000640:	f7ff ffdc 	bl	80005fc <uartcomInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0x1c>

08000646 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b094      	sub	sp, #80	; 0x50
 800064a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064c:	f107 0318 	add.w	r3, r7, #24
 8000650:	2238      	movs	r2, #56	; 0x38
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f004 f8a5 	bl	80047a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000668:	2000      	movs	r0, #0
 800066a:	f000 fe23 	bl	80012b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800066e:	2302      	movs	r3, #2
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2340      	movs	r3, #64	; 0x40
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000684:	2304      	movs	r3, #4
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000688:	2355      	movs	r3, #85	; 0x55
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0318 	add.w	r3, r7, #24
 800069c:	4618      	mov	r0, r3
 800069e:	f000 febd 	bl	800141c <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006a8:	f000 f8f0 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2303      	movs	r3, #3
 80006b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2104      	movs	r1, #4
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 f9bb 	bl	8001a40 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006d0:	f000 f8dc 	bl	800088c <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3750      	adds	r7, #80	; 0x50
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <MX_USART1_UART_Init+0x90>)
 80006e2:	4a23      	ldr	r2, [pc, #140]	; (8000770 <MX_USART1_UART_Init+0x94>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_USART1_UART_Init+0x90>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_USART1_UART_Init+0x90>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_USART1_UART_Init+0x90>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_USART1_UART_Init+0x90>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_USART1_UART_Init+0x90>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_USART1_UART_Init+0x90>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_USART1_UART_Init+0x90>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_USART1_UART_Init+0x90>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_USART1_UART_Init+0x90>)
 800071a:	2200      	movs	r2, #0
 800071c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_USART1_UART_Init+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000724:	4811      	ldr	r0, [pc, #68]	; (800076c <MX_USART1_UART_Init+0x90>)
 8000726:	f001 fd97 	bl	8002258 <HAL_UART_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000730:	f000 f8ac 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000734:	2100      	movs	r1, #0
 8000736:	480d      	ldr	r0, [pc, #52]	; (800076c <MX_USART1_UART_Init+0x90>)
 8000738:	f003 ff19 	bl	800456e <HAL_UARTEx_SetTxFifoThreshold>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000742:	f000 f8a3 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000746:	2100      	movs	r1, #0
 8000748:	4808      	ldr	r0, [pc, #32]	; (800076c <MX_USART1_UART_Init+0x90>)
 800074a:	f003 ff4e 	bl	80045ea <HAL_UARTEx_SetRxFifoThreshold>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000754:	f000 f89a 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_USART1_UART_Init+0x90>)
 800075a:	f003 fecf 	bl	80044fc <HAL_UARTEx_DisableFifoMode>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000764:	f000 f892 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000228 	.word	0x20000228
 8000770:	40013800 	.word	0x40013800

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <MX_USART2_UART_Init+0x90>)
 800077a:	4a23      	ldr	r2, [pc, #140]	; (8000808 <MX_USART2_UART_Init+0x94>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_USART2_UART_Init+0x90>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_USART2_UART_Init+0x90>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_USART2_UART_Init+0x90>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_USART2_UART_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_USART2_UART_Init+0x90>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_USART2_UART_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_USART2_UART_Init+0x90>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_USART2_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_USART2_UART_Init+0x90>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_USART2_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007bc:	4811      	ldr	r0, [pc, #68]	; (8000804 <MX_USART2_UART_Init+0x90>)
 80007be:	f001 fd4b 	bl	8002258 <HAL_UART_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007c8:	f000 f860 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007cc:	2100      	movs	r1, #0
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_USART2_UART_Init+0x90>)
 80007d0:	f003 fecd 	bl	800456e <HAL_UARTEx_SetTxFifoThreshold>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007da:	f000 f857 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007de:	2100      	movs	r1, #0
 80007e0:	4808      	ldr	r0, [pc, #32]	; (8000804 <MX_USART2_UART_Init+0x90>)
 80007e2:	f003 ff02 	bl	80045ea <HAL_UARTEx_SetRxFifoThreshold>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007ec:	f000 f84e 	bl	800088c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_USART2_UART_Init+0x90>)
 80007f2:	f003 fe83 	bl	80044fc <HAL_UARTEx_DisableFifoMode>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007fc:	f000 f846 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200002e4 	.word	0x200002e4
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_GPIO_Init+0x78>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <MX_GPIO_Init+0x78>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_GPIO_Init+0x78>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_GPIO_Init+0x78>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a11      	ldr	r2, [pc, #68]	; (8000884 <MX_GPIO_Init+0x78>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_GPIO_Init+0x78>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <MX_GPIO_Init+0x7c>)
 800085a:	f000 fd13 	bl	8001284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800085e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4619      	mov	r1, r3
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_GPIO_Init+0x7c>)
 8000878:	f000 fb82 	bl	8000f80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40021000 	.word	0x40021000
 8000888:	48000400 	.word	0x48000400

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_MspInit+0x44>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <HAL_MspInit+0x44>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6613      	str	r3, [r2, #96]	; 0x60
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_MspInit+0x44>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_MspInit+0x44>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6593      	str	r3, [r2, #88]	; 0x58
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008ce:	f000 fd95 	bl	80013fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b09c      	sub	sp, #112	; 0x70
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f8:	f107 0318 	add.w	r3, r7, #24
 80008fc:	2244      	movs	r2, #68	; 0x44
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f003 ff4f 	bl	80047a4 <memset>
  if(huart->Instance==USART1)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a42      	ldr	r2, [pc, #264]	; (8000a14 <HAL_UART_MspInit+0x134>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d140      	bne.n	8000992 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000910:	2301      	movs	r3, #1
 8000912:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	4618      	mov	r0, r3
 800091e:	f001 faab 	bl	8001e78 <HAL_RCCEx_PeriphCLKConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000928:	f7ff ffb0 	bl	800088c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800092c:	4b3a      	ldr	r3, [pc, #232]	; (8000a18 <HAL_UART_MspInit+0x138>)
 800092e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000930:	4a39      	ldr	r2, [pc, #228]	; (8000a18 <HAL_UART_MspInit+0x138>)
 8000932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000936:	6613      	str	r3, [r2, #96]	; 0x60
 8000938:	4b37      	ldr	r3, [pc, #220]	; (8000a18 <HAL_UART_MspInit+0x138>)
 800093a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b34      	ldr	r3, [pc, #208]	; (8000a18 <HAL_UART_MspInit+0x138>)
 8000946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000948:	4a33      	ldr	r2, [pc, #204]	; (8000a18 <HAL_UART_MspInit+0x138>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000950:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <HAL_UART_MspInit+0x138>)
 8000952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800095c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000960:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800096e:	2307      	movs	r3, #7
 8000970:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000976:	4619      	mov	r1, r3
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f000 fb00 	bl	8000f80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2025      	movs	r0, #37	; 0x25
 8000986:	f000 fa06 	bl	8000d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800098a:	2025      	movs	r0, #37	; 0x25
 800098c:	f000 fa1d 	bl	8000dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000990:	e03b      	b.n	8000a0a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a21      	ldr	r2, [pc, #132]	; (8000a1c <HAL_UART_MspInit+0x13c>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d136      	bne.n	8000a0a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800099c:	2302      	movs	r3, #2
 800099e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a4:	f107 0318 	add.w	r3, r7, #24
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 fa65 	bl	8001e78 <HAL_RCCEx_PeriphCLKConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80009b4:	f7ff ff6a 	bl	800088c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <HAL_UART_MspInit+0x138>)
 80009ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009bc:	4a16      	ldr	r2, [pc, #88]	; (8000a18 <HAL_UART_MspInit+0x138>)
 80009be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c2:	6593      	str	r3, [r2, #88]	; 0x58
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <HAL_UART_MspInit+0x138>)
 80009c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <HAL_UART_MspInit+0x138>)
 80009d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d4:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <HAL_UART_MspInit+0x138>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_UART_MspInit+0x138>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80009e8:	230c      	movs	r3, #12
 80009ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f8:	2307      	movs	r3, #7
 80009fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a00:	4619      	mov	r1, r3
 8000a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a06:	f000 fabb 	bl	8000f80 <HAL_GPIO_Init>
}
 8000a0a:	bf00      	nop
 8000a0c:	3770      	adds	r7, #112	; 0x70
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40013800 	.word	0x40013800
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40004400 	.word	0x40004400

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6c:	f000 f89a 	bl	8000ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <USART1_IRQHandler+0x10>)
 8000a7a:	f001 fcd1 	bl	8002420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000228 	.word	0x20000228

08000a88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <SystemInit+0x20>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <SystemInit+0x20>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000aac:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aae:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ab0:	f7ff ffea 	bl	8000a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab4:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab6:	490d      	ldr	r1, [pc, #52]	; (8000aec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <LoopForever+0xe>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000acc:	4c0a      	ldr	r4, [pc, #40]	; (8000af8 <LoopForever+0x16>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f003 fe6b 	bl	80047b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ade:	f7ff fda3 	bl	8000628 <main>

08000ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ae2:	e7fe      	b.n	8000ae2 <LoopForever>
  ldr   r0, =_estack
 8000ae4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000af0:	08004880 	.word	0x08004880
  ldr r2, =_sbss
 8000af4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000af8:	2000037c 	.word	0x2000037c

08000afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC1_2_IRQHandler>

08000afe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b04:	2300      	movs	r3, #0
 8000b06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f939 	bl	8000d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 f80e 	bl	8000b30 <HAL_InitTick>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	71fb      	strb	r3, [r7, #7]
 8000b1e:	e001      	b.n	8000b24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b20:	f7ff feba 	bl	8000898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b24:	79fb      	ldrb	r3, [r7, #7]

}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <HAL_InitTick+0x68>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d022      	beq.n	8000b8a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_InitTick+0x6c>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <HAL_InitTick+0x68>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b50:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 f944 	bl	8000de6 <HAL_SYSTICK_Config>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d10f      	bne.n	8000b84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b0f      	cmp	r3, #15
 8000b68:	d809      	bhi.n	8000b7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	6879      	ldr	r1, [r7, #4]
 8000b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b72:	f000 f910 	bl	8000d96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <HAL_InitTick+0x70>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6013      	str	r3, [r2, #0]
 8000b7c:	e007      	b.n	8000b8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	73fb      	strb	r3, [r7, #15]
 8000b82:	e004      	b.n	8000b8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	73fb      	strb	r3, [r7, #15]
 8000b88:	e001      	b.n	8000b8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_IncTick+0x1c>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_IncTick+0x20>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <HAL_IncTick+0x1c>)
 8000bb4:	6013      	str	r3, [r2, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	20000378 	.word	0x20000378
 8000bc4:	20000008 	.word	0x20000008

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_GetTick+0x14>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000378 	.word	0x20000378

08000be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c12:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <__NVIC_SetPriorityGrouping+0x44>)
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	60d3      	str	r3, [r2, #12]
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <__NVIC_GetPriorityGrouping+0x18>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	0a1b      	lsrs	r3, r3, #8
 8000c32:	f003 0307 	and.w	r3, r3, #7
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	db0b      	blt.n	8000c6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	f003 021f 	and.w	r2, r3, #31
 8000c5c:	4907      	ldr	r1, [pc, #28]	; (8000c7c <__NVIC_EnableIRQ+0x38>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	095b      	lsrs	r3, r3, #5
 8000c64:	2001      	movs	r0, #1
 8000c66:	fa00 f202 	lsl.w	r2, r0, r2
 8000c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000e100 	.word	0xe000e100

08000c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	6039      	str	r1, [r7, #0]
 8000c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db0a      	blt.n	8000caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	490c      	ldr	r1, [pc, #48]	; (8000ccc <__NVIC_SetPriority+0x4c>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	0112      	lsls	r2, r2, #4
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca8:	e00a      	b.n	8000cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4908      	ldr	r1, [pc, #32]	; (8000cd0 <__NVIC_SetPriority+0x50>)
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	f003 030f 	and.w	r3, r3, #15
 8000cb6:	3b04      	subs	r3, #4
 8000cb8:	0112      	lsls	r2, r2, #4
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	761a      	strb	r2, [r3, #24]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000e100 	.word	0xe000e100
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b089      	sub	sp, #36	; 0x24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f1c3 0307 	rsb	r3, r3, #7
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	bf28      	it	cs
 8000cf2:	2304      	movcs	r3, #4
 8000cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	d902      	bls.n	8000d04 <NVIC_EncodePriority+0x30>
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3b03      	subs	r3, #3
 8000d02:	e000      	b.n	8000d06 <NVIC_EncodePriority+0x32>
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43da      	mvns	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	401a      	ands	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	43d9      	mvns	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	4313      	orrs	r3, r2
         );
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3724      	adds	r7, #36	; 0x24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d4c:	d301      	bcc.n	8000d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00f      	b.n	8000d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <SysTick_Config+0x40>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5a:	210f      	movs	r1, #15
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f7ff ff8e 	bl	8000c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <SysTick_Config+0x40>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6a:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <SysTick_Config+0x40>)
 8000d6c:	2207      	movs	r2, #7
 8000d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	e000e010 	.word	0xe000e010

08000d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ff29 	bl	8000be0 <__NVIC_SetPriorityGrouping>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff40 	bl	8000c28 <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff90 	bl	8000cd4 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5f 	bl	8000c80 <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff33 	bl	8000c44 <__NVIC_EnableIRQ>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ffa4 	bl	8000d3c <SysTick_Config>
 8000df4:	4603      	mov	r3, r0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b085      	sub	sp, #20
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d005      	beq.n	8000e22 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2204      	movs	r2, #4
 8000e1a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	e037      	b.n	8000e92 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f022 020e 	bic.w	r2, r2, #14
 8000e30:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e40:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f022 0201 	bic.w	r2, r2, #1
 8000e50:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f003 021f 	and.w	r2, r3, #31
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fa01 f202 	lsl.w	r2, r1, r2
 8000e64:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e6e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00c      	beq.n	8000e92 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e86:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e90:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2201      	movs	r2, #1
 8000e96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d00d      	beq.n	8000ee4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2204      	movs	r2, #4
 8000ecc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	e047      	b.n	8000f74 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 020e 	bic.w	r2, r2, #14
 8000ef2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0201 	bic.w	r2, r2, #1
 8000f02:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	2101      	movs	r1, #1
 8000f22:	fa01 f202 	lsl.w	r2, r1, r2
 8000f26:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f30:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d00c      	beq.n	8000f54 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f48:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f52:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	4798      	blx	r3
    }
  }
  return status;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f8e:	e15a      	b.n	8001246 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	2101      	movs	r1, #1
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 814c 	beq.w	8001240 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d005      	beq.n	8000fc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d130      	bne.n	8001022 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	091b      	lsrs	r3, r3, #4
 800100c:	f003 0201 	and.w	r2, r3, #1
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b03      	cmp	r3, #3
 800102c:	d017      	beq.n	800105e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d123      	bne.n	80010b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3208      	adds	r2, #8
 8001072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	691a      	ldr	r2, [r3, #16]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	08da      	lsrs	r2, r3, #3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3208      	adds	r2, #8
 80010ac:	6939      	ldr	r1, [r7, #16]
 80010ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0203 	and.w	r2, r3, #3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 80a6 	beq.w	8001240 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f4:	4b5b      	ldr	r3, [pc, #364]	; (8001264 <HAL_GPIO_Init+0x2e4>)
 80010f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f8:	4a5a      	ldr	r2, [pc, #360]	; (8001264 <HAL_GPIO_Init+0x2e4>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6613      	str	r3, [r2, #96]	; 0x60
 8001100:	4b58      	ldr	r3, [pc, #352]	; (8001264 <HAL_GPIO_Init+0x2e4>)
 8001102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800110c:	4a56      	ldr	r2, [pc, #344]	; (8001268 <HAL_GPIO_Init+0x2e8>)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	220f      	movs	r2, #15
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001136:	d01f      	beq.n	8001178 <HAL_GPIO_Init+0x1f8>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a4c      	ldr	r2, [pc, #304]	; (800126c <HAL_GPIO_Init+0x2ec>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d019      	beq.n	8001174 <HAL_GPIO_Init+0x1f4>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a4b      	ldr	r2, [pc, #300]	; (8001270 <HAL_GPIO_Init+0x2f0>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d013      	beq.n	8001170 <HAL_GPIO_Init+0x1f0>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a4a      	ldr	r2, [pc, #296]	; (8001274 <HAL_GPIO_Init+0x2f4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d00d      	beq.n	800116c <HAL_GPIO_Init+0x1ec>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a49      	ldr	r2, [pc, #292]	; (8001278 <HAL_GPIO_Init+0x2f8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d007      	beq.n	8001168 <HAL_GPIO_Init+0x1e8>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a48      	ldr	r2, [pc, #288]	; (800127c <HAL_GPIO_Init+0x2fc>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d101      	bne.n	8001164 <HAL_GPIO_Init+0x1e4>
 8001160:	2305      	movs	r3, #5
 8001162:	e00a      	b.n	800117a <HAL_GPIO_Init+0x1fa>
 8001164:	2306      	movs	r3, #6
 8001166:	e008      	b.n	800117a <HAL_GPIO_Init+0x1fa>
 8001168:	2304      	movs	r3, #4
 800116a:	e006      	b.n	800117a <HAL_GPIO_Init+0x1fa>
 800116c:	2303      	movs	r3, #3
 800116e:	e004      	b.n	800117a <HAL_GPIO_Init+0x1fa>
 8001170:	2302      	movs	r3, #2
 8001172:	e002      	b.n	800117a <HAL_GPIO_Init+0x1fa>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <HAL_GPIO_Init+0x1fa>
 8001178:	2300      	movs	r3, #0
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	f002 0203 	and.w	r2, r2, #3
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	4093      	lsls	r3, r2
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800118a:	4937      	ldr	r1, [pc, #220]	; (8001268 <HAL_GPIO_Init+0x2e8>)
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001198:	4b39      	ldr	r3, [pc, #228]	; (8001280 <HAL_GPIO_Init+0x300>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011bc:	4a30      	ldr	r2, [pc, #192]	; (8001280 <HAL_GPIO_Init+0x300>)
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011c2:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <HAL_GPIO_Init+0x300>)
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011e6:	4a26      	ldr	r2, [pc, #152]	; (8001280 <HAL_GPIO_Init+0x300>)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <HAL_GPIO_Init+0x300>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001210:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <HAL_GPIO_Init+0x300>)
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <HAL_GPIO_Init+0x300>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800123a:	4a11      	ldr	r2, [pc, #68]	; (8001280 <HAL_GPIO_Init+0x300>)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3301      	adds	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	fa22 f303 	lsr.w	r3, r2, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	f47f ae9d 	bne.w	8000f90 <HAL_GPIO_Init+0x10>
  }
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	40021000 	.word	0x40021000
 8001268:	40010000 	.word	0x40010000
 800126c:	48000400 	.word	0x48000400
 8001270:	48000800 	.word	0x48000800
 8001274:	48000c00 	.word	0x48000c00
 8001278:	48001000 	.word	0x48001000
 800127c:	48001400 	.word	0x48001400
 8001280:	40010400 	.word	0x40010400

08001284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
 8001290:	4613      	mov	r3, r2
 8001292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d141      	bne.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012c2:	4b4b      	ldr	r3, [pc, #300]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ce:	d131      	bne.n	8001334 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012d0:	4b47      	ldr	r3, [pc, #284]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012d6:	4a46      	ldr	r2, [pc, #280]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e0:	4b43      	ldr	r3, [pc, #268]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012e8:	4a41      	ldr	r2, [pc, #260]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012f0:	4b40      	ldr	r3, [pc, #256]	; (80013f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2232      	movs	r2, #50	; 0x32
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	4a3f      	ldr	r2, [pc, #252]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	0c9b      	lsrs	r3, r3, #18
 8001302:	3301      	adds	r3, #1
 8001304:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001306:	e002      	b.n	800130e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3b01      	subs	r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800130e:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800131a:	d102      	bne.n	8001322 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f2      	bne.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001322:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800132e:	d158      	bne.n	80013e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e057      	b.n	80013e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001334:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800133a:	4a2d      	ldr	r2, [pc, #180]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001340:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001344:	e04d      	b.n	80013e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800134c:	d141      	bne.n	80013d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800135a:	d131      	bne.n	80013c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001362:	4a23      	ldr	r2, [pc, #140]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001368:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800136c:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001374:	4a1e      	ldr	r2, [pc, #120]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2232      	movs	r2, #50	; 0x32
 8001382:	fb02 f303 	mul.w	r3, r2, r3
 8001386:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001388:	fba2 2303 	umull	r2, r3, r2, r3
 800138c:	0c9b      	lsrs	r3, r3, #18
 800138e:	3301      	adds	r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001392:	e002      	b.n	800139a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3b01      	subs	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a6:	d102      	bne.n	80013ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f2      	bne.n	8001394 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ba:	d112      	bne.n	80013e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e011      	b.n	80013e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013c6:	4a0a      	ldr	r2, [pc, #40]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80013d0:	e007      	b.n	80013e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	40007000 	.word	0x40007000
 80013f4:	20000000 	.word	0x20000000
 80013f8:	431bde83 	.word	0x431bde83

080013fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140a:	6093      	str	r3, [r2, #8]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40007000 	.word	0x40007000

0800141c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e2fe      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d075      	beq.n	8001526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800143a:	4b97      	ldr	r3, [pc, #604]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001444:	4b94      	ldr	r3, [pc, #592]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	2b0c      	cmp	r3, #12
 8001452:	d102      	bne.n	800145a <HAL_RCC_OscConfig+0x3e>
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d002      	beq.n	8001460 <HAL_RCC_OscConfig+0x44>
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	2b08      	cmp	r3, #8
 800145e:	d10b      	bne.n	8001478 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	4b8d      	ldr	r3, [pc, #564]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d05b      	beq.n	8001524 <HAL_RCC_OscConfig+0x108>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d157      	bne.n	8001524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e2d9      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d106      	bne.n	8001490 <HAL_RCC_OscConfig+0x74>
 8001482:	4b85      	ldr	r3, [pc, #532]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a84      	ldr	r2, [pc, #528]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e01d      	b.n	80014cc <HAL_RCC_OscConfig+0xb0>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x98>
 800149a:	4b7f      	ldr	r3, [pc, #508]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a7e      	ldr	r2, [pc, #504]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b7c      	ldr	r3, [pc, #496]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a7b      	ldr	r2, [pc, #492]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e00b      	b.n	80014cc <HAL_RCC_OscConfig+0xb0>
 80014b4:	4b78      	ldr	r3, [pc, #480]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a77      	ldr	r2, [pc, #476]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 80014ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b75      	ldr	r3, [pc, #468]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a74      	ldr	r2, [pc, #464]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 80014c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d013      	beq.n	80014fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d4:	f7ff fb78 	bl	8000bc8 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fb74 	bl	8000bc8 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e29e      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ee:	4b6a      	ldr	r3, [pc, #424]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0xc0>
 80014fa:	e014      	b.n	8001526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb64 	bl	8000bc8 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fb60 	bl	8000bc8 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e28a      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001516:	4b60      	ldr	r3, [pc, #384]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0xe8>
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d075      	beq.n	800161e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001532:	4b59      	ldr	r3, [pc, #356]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800153c:	4b56      	ldr	r3, [pc, #344]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	2b0c      	cmp	r3, #12
 800154a:	d102      	bne.n	8001552 <HAL_RCC_OscConfig+0x136>
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d002      	beq.n	8001558 <HAL_RCC_OscConfig+0x13c>
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	2b04      	cmp	r3, #4
 8001556:	d11f      	bne.n	8001598 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001558:	4b4f      	ldr	r3, [pc, #316]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_OscConfig+0x154>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e25d      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001570:	4b49      	ldr	r3, [pc, #292]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	061b      	lsls	r3, r3, #24
 800157e:	4946      	ldr	r1, [pc, #280]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 8001580:	4313      	orrs	r3, r2
 8001582:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001584:	4b45      	ldr	r3, [pc, #276]	; (800169c <HAL_RCC_OscConfig+0x280>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fad1 	bl	8000b30 <HAL_InitTick>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d043      	beq.n	800161c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e249      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d023      	beq.n	80015e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a0:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a3c      	ldr	r2, [pc, #240]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 80015a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ac:	f7ff fb0c 	bl	8000bc8 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b4:	f7ff fb08 	bl	8000bc8 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e232      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015c6:	4b34      	ldr	r3, [pc, #208]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d2:	4b31      	ldr	r3, [pc, #196]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	061b      	lsls	r3, r3, #24
 80015e0:	492d      	ldr	r1, [pc, #180]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	604b      	str	r3, [r1, #4]
 80015e6:	e01a      	b.n	800161e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e8:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a2a      	ldr	r2, [pc, #168]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 80015ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f4:	f7ff fae8 	bl	8000bc8 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fc:	f7ff fae4 	bl	8000bc8 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e20e      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x1e0>
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800161c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d041      	beq.n	80016ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d01c      	beq.n	800166c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 8001634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001638:	4a17      	ldr	r2, [pc, #92]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001642:	f7ff fac1 	bl	8000bc8 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164a:	f7ff fabd 	bl	8000bc8 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e1e7      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 800165e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0ef      	beq.n	800164a <HAL_RCC_OscConfig+0x22e>
 800166a:	e020      	b.n	80016ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 800166e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001672:	4a09      	ldr	r2, [pc, #36]	; (8001698 <HAL_RCC_OscConfig+0x27c>)
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167c:	f7ff faa4 	bl	8000bc8 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001682:	e00d      	b.n	80016a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001684:	f7ff faa0 	bl	8000bc8 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d906      	bls.n	80016a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e1ca      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016a0:	4b8c      	ldr	r3, [pc, #560]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 80016a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ea      	bne.n	8001684 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 80a6 	beq.w	8001808 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016bc:	2300      	movs	r3, #0
 80016be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016c0:	4b84      	ldr	r3, [pc, #528]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_OscConfig+0x2b4>
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x2b6>
 80016d0:	2300      	movs	r3, #0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00d      	beq.n	80016f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b7f      	ldr	r3, [pc, #508]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 80016d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016da:	4a7e      	ldr	r2, [pc, #504]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	6593      	str	r3, [r2, #88]	; 0x58
 80016e2:	4b7c      	ldr	r3, [pc, #496]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016ee:	2301      	movs	r3, #1
 80016f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f2:	4b79      	ldr	r3, [pc, #484]	; (80018d8 <HAL_RCC_OscConfig+0x4bc>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d118      	bne.n	8001730 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016fe:	4b76      	ldr	r3, [pc, #472]	; (80018d8 <HAL_RCC_OscConfig+0x4bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a75      	ldr	r2, [pc, #468]	; (80018d8 <HAL_RCC_OscConfig+0x4bc>)
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170a:	f7ff fa5d 	bl	8000bc8 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001712:	f7ff fa59 	bl	8000bc8 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e183      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001724:	4b6c      	ldr	r3, [pc, #432]	; (80018d8 <HAL_RCC_OscConfig+0x4bc>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d108      	bne.n	800174a <HAL_RCC_OscConfig+0x32e>
 8001738:	4b66      	ldr	r3, [pc, #408]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173e:	4a65      	ldr	r2, [pc, #404]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001748:	e024      	b.n	8001794 <HAL_RCC_OscConfig+0x378>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b05      	cmp	r3, #5
 8001750:	d110      	bne.n	8001774 <HAL_RCC_OscConfig+0x358>
 8001752:	4b60      	ldr	r3, [pc, #384]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 8001754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001758:	4a5e      	ldr	r2, [pc, #376]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001762:	4b5c      	ldr	r3, [pc, #368]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 8001764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001768:	4a5a      	ldr	r2, [pc, #360]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001772:	e00f      	b.n	8001794 <HAL_RCC_OscConfig+0x378>
 8001774:	4b57      	ldr	r3, [pc, #348]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177a:	4a56      	ldr	r2, [pc, #344]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001784:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 8001786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178a:	4a52      	ldr	r2, [pc, #328]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 800178c:	f023 0304 	bic.w	r3, r3, #4
 8001790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d016      	beq.n	80017ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff fa14 	bl	8000bc8 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a4:	f7ff fa10 	bl	8000bc8 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e138      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ba:	4b46      	ldr	r3, [pc, #280]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 80017bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0ed      	beq.n	80017a4 <HAL_RCC_OscConfig+0x388>
 80017c8:	e015      	b.n	80017f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ca:	f7ff f9fd 	bl	8000bc8 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017d0:	e00a      	b.n	80017e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff f9f9 	bl	8000bc8 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e121      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e8:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 80017ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1ed      	bne.n	80017d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017f6:	7ffb      	ldrb	r3, [r7, #31]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fc:	4b35      	ldr	r3, [pc, #212]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	4a34      	ldr	r2, [pc, #208]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 8001802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001806:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0320 	and.w	r3, r3, #32
 8001810:	2b00      	cmp	r3, #0
 8001812:	d03c      	beq.n	800188e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d01c      	beq.n	8001856 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800181c:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 800181e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001822:	4a2c      	ldr	r2, [pc, #176]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182c:	f7ff f9cc 	bl	8000bc8 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001834:	f7ff f9c8 	bl	8000bc8 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e0f2      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 8001848:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0ef      	beq.n	8001834 <HAL_RCC_OscConfig+0x418>
 8001854:	e01b      	b.n	800188e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001856:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 8001858:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800185c:	4a1d      	ldr	r2, [pc, #116]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 800185e:	f023 0301 	bic.w	r3, r3, #1
 8001862:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001866:	f7ff f9af 	bl	8000bc8 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800186e:	f7ff f9ab 	bl	8000bc8 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e0d5      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 8001882:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1ef      	bne.n	800186e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 80c9 	beq.w	8001a2a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 030c 	and.w	r3, r3, #12
 80018a0:	2b0c      	cmp	r3, #12
 80018a2:	f000 8083 	beq.w	80019ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d15e      	bne.n	800196c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <HAL_RCC_OscConfig+0x4b8>)
 80018b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff f985 	bl	8000bc8 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c0:	e00c      	b.n	80018dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c2:	f7ff f981 	bl	8000bc8 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d905      	bls.n	80018dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e0ab      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018dc:	4b55      	ldr	r3, [pc, #340]	; (8001a34 <HAL_RCC_OscConfig+0x618>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1ec      	bne.n	80018c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e8:	4b52      	ldr	r3, [pc, #328]	; (8001a34 <HAL_RCC_OscConfig+0x618>)
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	4b52      	ldr	r3, [pc, #328]	; (8001a38 <HAL_RCC_OscConfig+0x61c>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6a11      	ldr	r1, [r2, #32]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018f8:	3a01      	subs	r2, #1
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	4311      	orrs	r1, r2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001902:	0212      	lsls	r2, r2, #8
 8001904:	4311      	orrs	r1, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800190a:	0852      	lsrs	r2, r2, #1
 800190c:	3a01      	subs	r2, #1
 800190e:	0552      	lsls	r2, r2, #21
 8001910:	4311      	orrs	r1, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001916:	0852      	lsrs	r2, r2, #1
 8001918:	3a01      	subs	r2, #1
 800191a:	0652      	lsls	r2, r2, #25
 800191c:	4311      	orrs	r1, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001922:	06d2      	lsls	r2, r2, #27
 8001924:	430a      	orrs	r2, r1
 8001926:	4943      	ldr	r1, [pc, #268]	; (8001a34 <HAL_RCC_OscConfig+0x618>)
 8001928:	4313      	orrs	r3, r2
 800192a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800192c:	4b41      	ldr	r3, [pc, #260]	; (8001a34 <HAL_RCC_OscConfig+0x618>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a40      	ldr	r2, [pc, #256]	; (8001a34 <HAL_RCC_OscConfig+0x618>)
 8001932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001936:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001938:	4b3e      	ldr	r3, [pc, #248]	; (8001a34 <HAL_RCC_OscConfig+0x618>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4a3d      	ldr	r2, [pc, #244]	; (8001a34 <HAL_RCC_OscConfig+0x618>)
 800193e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001942:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff f940 	bl	8000bc8 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff f93c 	bl	8000bc8 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e066      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195e:	4b35      	ldr	r3, [pc, #212]	; (8001a34 <HAL_RCC_OscConfig+0x618>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x530>
 800196a:	e05e      	b.n	8001a2a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196c:	4b31      	ldr	r3, [pc, #196]	; (8001a34 <HAL_RCC_OscConfig+0x618>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a30      	ldr	r2, [pc, #192]	; (8001a34 <HAL_RCC_OscConfig+0x618>)
 8001972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff f926 	bl	8000bc8 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001980:	f7ff f922 	bl	8000bc8 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e04c      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001992:	4b28      	ldr	r3, [pc, #160]	; (8001a34 <HAL_RCC_OscConfig+0x618>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800199e:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <HAL_RCC_OscConfig+0x618>)
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	4924      	ldr	r1, [pc, #144]	; (8001a34 <HAL_RCC_OscConfig+0x618>)
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <HAL_RCC_OscConfig+0x620>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	60cb      	str	r3, [r1, #12]
 80019aa:	e03e      	b.n	8001a2a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e039      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <HAL_RCC_OscConfig+0x618>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f003 0203 	and.w	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d12c      	bne.n	8001a26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	3b01      	subs	r3, #1
 80019d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d123      	bne.n	8001a26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d11b      	bne.n	8001a26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d113      	bne.n	8001a26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d109      	bne.n	8001a26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1c:	085b      	lsrs	r3, r3, #1
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021000 	.word	0x40021000
 8001a38:	019f800c 	.word	0x019f800c
 8001a3c:	feeefffc 	.word	0xfeeefffc

08001a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e11e      	b.n	8001c96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a58:	4b91      	ldr	r3, [pc, #580]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 030f 	and.w	r3, r3, #15
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d910      	bls.n	8001a88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b8e      	ldr	r3, [pc, #568]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 020f 	bic.w	r2, r3, #15
 8001a6e:	498c      	ldr	r1, [pc, #560]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a76:	4b8a      	ldr	r3, [pc, #552]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e106      	b.n	8001c96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d073      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d129      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9c:	4b81      	ldr	r3, [pc, #516]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0f4      	b.n	8001c96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001aac:	f000 f99e 	bl	8001dec <RCC_GetSysClockFreqFromPLLSource>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4a7c      	ldr	r2, [pc, #496]	; (8001ca8 <HAL_RCC_ClockConfig+0x268>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d93f      	bls.n	8001b3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001aba:	4b7a      	ldr	r3, [pc, #488]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d009      	beq.n	8001ada <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d033      	beq.n	8001b3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d12f      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ada:	4b72      	ldr	r3, [pc, #456]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ae2:	4a70      	ldr	r2, [pc, #448]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	e024      	b.n	8001b3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af8:	4b6a      	ldr	r3, [pc, #424]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d109      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0c6      	b.n	8001c96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b08:	4b66      	ldr	r3, [pc, #408]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0be      	b.n	8001c96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b18:	f000 f8ce 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4a61      	ldr	r2, [pc, #388]	; (8001ca8 <HAL_RCC_ClockConfig+0x268>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d909      	bls.n	8001b3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b26:	4b5f      	ldr	r3, [pc, #380]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b2e:	4a5d      	ldr	r2, [pc, #372]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b36:	2380      	movs	r3, #128	; 0x80
 8001b38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b3a:	4b5a      	ldr	r3, [pc, #360]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f023 0203 	bic.w	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4957      	ldr	r1, [pc, #348]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b4c:	f7ff f83c 	bl	8000bc8 <HAL_GetTick>
 8001b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b54:	f7ff f838 	bl	8000bc8 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e095      	b.n	8001c96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	4b4e      	ldr	r3, [pc, #312]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 020c 	and.w	r2, r3, #12
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d1eb      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d023      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b94:	4b43      	ldr	r3, [pc, #268]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	4a42      	ldr	r2, [pc, #264]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001b9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d007      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001bac:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001bb4:	4a3b      	ldr	r2, [pc, #236]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001bb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bbc:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4936      	ldr	r1, [pc, #216]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b80      	cmp	r3, #128	; 0x80
 8001bd4:	d105      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bd6:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	4a32      	ldr	r2, [pc, #200]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001bdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001be0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be2:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d21d      	bcs.n	8001c2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f023 020f 	bic.w	r2, r3, #15
 8001bf8:	4929      	ldr	r1, [pc, #164]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c00:	f7fe ffe2 	bl	8000bc8 <HAL_GetTick>
 8001c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c08:	f7fe ffde 	bl	8000bc8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e03b      	b.n	8001c96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_RCC_ClockConfig+0x260>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d1ed      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c38:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4917      	ldr	r1, [pc, #92]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d009      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	490f      	ldr	r1, [pc, #60]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c6a:	f000 f825 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <HAL_RCC_ClockConfig+0x264>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	490c      	ldr	r1, [pc, #48]	; (8001cac <HAL_RCC_ClockConfig+0x26c>)
 8001c7c:	5ccb      	ldrb	r3, [r1, r3]
 8001c7e:	f003 031f 	and.w	r3, r3, #31
 8001c82:	fa22 f303 	lsr.w	r3, r2, r3
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <HAL_RCC_ClockConfig+0x270>)
 8001c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_RCC_ClockConfig+0x274>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe ff4e 	bl	8000b30 <HAL_InitTick>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40022000 	.word	0x40022000
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	04c4b400 	.word	0x04c4b400
 8001cac:	08004830 	.word	0x08004830
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	20000004 	.word	0x20000004

08001cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cbe:	4b2c      	ldr	r3, [pc, #176]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d102      	bne.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cca:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	e047      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cd0:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d102      	bne.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cdc:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	e03e      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ce2:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b0c      	cmp	r3, #12
 8001cec:	d136      	bne.n	8001d5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3301      	adds	r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d10c      	bne.n	8001d26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d0c:	4a1a      	ldr	r2, [pc, #104]	; (8001d78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	4a16      	ldr	r2, [pc, #88]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d16:	68d2      	ldr	r2, [r2, #12]
 8001d18:	0a12      	lsrs	r2, r2, #8
 8001d1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d1e:	fb02 f303 	mul.w	r3, r2, r3
 8001d22:	617b      	str	r3, [r7, #20]
      break;
 8001d24:	e00c      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d26:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2e:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d30:	68d2      	ldr	r2, [r2, #12]
 8001d32:	0a12      	lsrs	r2, r2, #8
 8001d34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d38:	fb02 f303 	mul.w	r3, r2, r3
 8001d3c:	617b      	str	r3, [r7, #20]
      break;
 8001d3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0e5b      	lsrs	r3, r3, #25
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	e001      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d60:	693b      	ldr	r3, [r7, #16]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	371c      	adds	r7, #28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000
 8001d74:	00f42400 	.word	0x00f42400
 8001d78:	007a1200 	.word	0x007a1200

08001d7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d80:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000000 	.word	0x20000000

08001d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d98:	f7ff fff0 	bl	8001d7c <HAL_RCC_GetHCLKFreq>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	0a1b      	lsrs	r3, r3, #8
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	4904      	ldr	r1, [pc, #16]	; (8001dbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001daa:	5ccb      	ldrb	r3, [r1, r3]
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	08004840 	.word	0x08004840

08001dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dc4:	f7ff ffda 	bl	8001d7c <HAL_RCC_GetHCLKFreq>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	0adb      	lsrs	r3, r3, #11
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	4904      	ldr	r1, [pc, #16]	; (8001de8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dd6:	5ccb      	ldrb	r3, [r1, r3]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	08004840 	.word	0x08004840

08001dec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001df2:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	3301      	adds	r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d10c      	bne.n	8001e2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e10:	4a17      	ldr	r2, [pc, #92]	; (8001e70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e18:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e1a:	68d2      	ldr	r2, [r2, #12]
 8001e1c:	0a12      	lsrs	r2, r2, #8
 8001e1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e22:	fb02 f303 	mul.w	r3, r2, r3
 8001e26:	617b      	str	r3, [r7, #20]
    break;
 8001e28:	e00c      	b.n	8001e44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e2a:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e32:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e34:	68d2      	ldr	r2, [r2, #12]
 8001e36:	0a12      	lsrs	r2, r2, #8
 8001e38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e3c:	fb02 f303 	mul.w	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
    break;
 8001e42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	0e5b      	lsrs	r3, r3, #25
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	3301      	adds	r3, #1
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e5e:	687b      	ldr	r3, [r7, #4]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	371c      	adds	r7, #28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	007a1200 	.word	0x007a1200
 8001e74:	00f42400 	.word	0x00f42400

08001e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e80:	2300      	movs	r3, #0
 8001e82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e84:	2300      	movs	r3, #0
 8001e86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 8098 	beq.w	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9a:	4b43      	ldr	r3, [pc, #268]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10d      	bne.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	4b40      	ldr	r3, [pc, #256]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eaa:	4a3f      	ldr	r2, [pc, #252]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ec2:	4b3a      	ldr	r3, [pc, #232]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a39      	ldr	r2, [pc, #228]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ecc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ece:	f7fe fe7b 	bl	8000bc8 <HAL_GetTick>
 8001ed2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ed4:	e009      	b.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed6:	f7fe fe77 	bl	8000bc8 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d902      	bls.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	74fb      	strb	r3, [r7, #19]
        break;
 8001ee8:	e005      	b.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eea:	4b30      	ldr	r3, [pc, #192]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0ef      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001ef6:	7cfb      	ldrb	r3, [r7, #19]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d159      	bne.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001efc:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01e      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d019      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f18:	4b23      	ldr	r3, [pc, #140]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f24:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2a:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f34:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3a:	4a1b      	ldr	r2, [pc, #108]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f44:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d016      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f56:	f7fe fe37 	bl	8000bc8 <HAL_GetTick>
 8001f5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f5c:	e00b      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7fe fe33 	bl	8000bc8 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d902      	bls.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	74fb      	strb	r3, [r7, #19]
            break;
 8001f74:	e006      	b.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0ec      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f84:	7cfb      	ldrb	r3, [r7, #19]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10b      	bne.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	4903      	ldr	r1, [pc, #12]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fa2:	7cfb      	ldrb	r3, [r7, #19]
 8001fa4:	74bb      	strb	r3, [r7, #18]
 8001fa6:	e005      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fb0:	7cfb      	ldrb	r3, [r7, #19]
 8001fb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fb4:	7c7b      	ldrb	r3, [r7, #17]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d105      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fba:	4ba6      	ldr	r3, [pc, #664]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	4aa5      	ldr	r2, [pc, #660]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00a      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fd2:	4ba0      	ldr	r3, [pc, #640]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd8:	f023 0203 	bic.w	r2, r3, #3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	499c      	ldr	r1, [pc, #624]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00a      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ff4:	4b97      	ldr	r3, [pc, #604]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	f023 020c 	bic.w	r2, r3, #12
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	4994      	ldr	r1, [pc, #592]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002004:	4313      	orrs	r3, r2
 8002006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00a      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002016:	4b8f      	ldr	r3, [pc, #572]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	498b      	ldr	r1, [pc, #556]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00a      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002038:	4b86      	ldr	r3, [pc, #536]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	4983      	ldr	r1, [pc, #524]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0320 	and.w	r3, r3, #32
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800205a:	4b7e      	ldr	r3, [pc, #504]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800205c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002060:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	497a      	ldr	r1, [pc, #488]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800207c:	4b75      	ldr	r3, [pc, #468]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002082:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	4972      	ldr	r1, [pc, #456]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800209e:	4b6d      	ldr	r3, [pc, #436]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	4969      	ldr	r1, [pc, #420]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00a      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020c0:	4b64      	ldr	r3, [pc, #400]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	4961      	ldr	r1, [pc, #388]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020e2:	4b5c      	ldr	r3, [pc, #368]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	4958      	ldr	r1, [pc, #352]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002100:	2b00      	cmp	r3, #0
 8002102:	d015      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002104:	4b53      	ldr	r3, [pc, #332]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	4950      	ldr	r1, [pc, #320]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002122:	d105      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002124:	4b4b      	ldr	r3, [pc, #300]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a4a      	ldr	r2, [pc, #296]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800212a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800212e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002138:	2b00      	cmp	r3, #0
 800213a:	d015      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800213c:	4b45      	ldr	r3, [pc, #276]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	4942      	ldr	r1, [pc, #264]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800215a:	d105      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800215c:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a3c      	ldr	r2, [pc, #240]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002166:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d015      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002174:	4b37      	ldr	r3, [pc, #220]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4934      	ldr	r1, [pc, #208]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002192:	d105      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002194:	4b2f      	ldr	r3, [pc, #188]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4a2e      	ldr	r2, [pc, #184]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800219a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800219e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d015      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021ac:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ba:	4926      	ldr	r1, [pc, #152]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021ca:	d105      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021cc:	4b21      	ldr	r3, [pc, #132]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a20      	ldr	r2, [pc, #128]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021d6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d015      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021e4:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	4918      	ldr	r1, [pc, #96]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002202:	d105      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4a12      	ldr	r2, [pc, #72]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800220a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800220e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d015      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800221c:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222a:	490a      	ldr	r1, [pc, #40]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800223a:	d105      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002246:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002248:	7cbb      	ldrb	r3, [r7, #18]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000

08002258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e042      	b.n	80022f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002270:	2b00      	cmp	r3, #0
 8002272:	d106      	bne.n	8002282 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7fe fb2f 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2224      	movs	r2, #36	; 0x24
 8002286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0201 	bic.w	r2, r2, #1
 8002298:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 feca 	bl	800303c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 fbfb 	bl	8002aa4 <UART_SetConfig>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e01b      	b.n	80022f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 ff49 	bl	8003180 <UART_CheckIdleState>
 80022ee:	4603      	mov	r3, r0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b091      	sub	sp, #68	; 0x44
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	4613      	mov	r3, r2
 8002304:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230c:	2b20      	cmp	r3, #32
 800230e:	d178      	bne.n	8002402 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_UART_Transmit_IT+0x24>
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e071      	b.n	8002404 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	88fa      	ldrh	r2, [r7, #6]
 800232a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	88fa      	ldrh	r2, [r7, #6]
 8002332:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2221      	movs	r2, #33	; 0x21
 8002348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002354:	d12a      	bne.n	80023ac <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235e:	d107      	bne.n	8002370 <HAL_UART_Transmit_IT+0x78>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d103      	bne.n	8002370 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4a29      	ldr	r2, [pc, #164]	; (8002410 <HAL_UART_Transmit_IT+0x118>)
 800236c:	679a      	str	r2, [r3, #120]	; 0x78
 800236e:	e002      	b.n	8002376 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4a28      	ldr	r2, [pc, #160]	; (8002414 <HAL_UART_Transmit_IT+0x11c>)
 8002374:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3308      	adds	r3, #8
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002380:	e853 3f00 	ldrex	r3, [r3]
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800238c:	63bb      	str	r3, [r7, #56]	; 0x38
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	3308      	adds	r3, #8
 8002394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002396:	637a      	str	r2, [r7, #52]	; 0x34
 8002398:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800239a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800239c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800239e:	e841 2300 	strex	r3, r2, [r1]
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80023a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1e5      	bne.n	8002376 <HAL_UART_Transmit_IT+0x7e>
 80023aa:	e028      	b.n	80023fe <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b4:	d107      	bne.n	80023c6 <HAL_UART_Transmit_IT+0xce>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d103      	bne.n	80023c6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4a15      	ldr	r2, [pc, #84]	; (8002418 <HAL_UART_Transmit_IT+0x120>)
 80023c2:	679a      	str	r2, [r3, #120]	; 0x78
 80023c4:	e002      	b.n	80023cc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4a14      	ldr	r2, [pc, #80]	; (800241c <HAL_UART_Transmit_IT+0x124>)
 80023ca:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	e853 3f00 	ldrex	r3, [r3]
 80023d8:	613b      	str	r3, [r7, #16]
   return(result);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ea:	623b      	str	r3, [r7, #32]
 80023ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ee:	69f9      	ldr	r1, [r7, #28]
 80023f0:	6a3a      	ldr	r2, [r7, #32]
 80023f2:	e841 2300 	strex	r3, r2, [r1]
 80023f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1e6      	bne.n	80023cc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	e000      	b.n	8002404 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002402:	2302      	movs	r3, #2
  }
}
 8002404:	4618      	mov	r0, r3
 8002406:	3744      	adds	r7, #68	; 0x44
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	08003947 	.word	0x08003947
 8002414:	08003867 	.word	0x08003867
 8002418:	080037a5 	.word	0x080037a5
 800241c:	080036ed 	.word	0x080036ed

08002420 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b0ba      	sub	sp, #232	; 0xe8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002446:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800244a:	f640 030f 	movw	r3, #2063	; 0x80f
 800244e:	4013      	ands	r3, r2
 8002450:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d11b      	bne.n	8002494 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800245c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002460:	f003 0320 	and.w	r3, r3, #32
 8002464:	2b00      	cmp	r3, #0
 8002466:	d015      	beq.n	8002494 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d105      	bne.n	8002480 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d009      	beq.n	8002494 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 82e3 	beq.w	8002a50 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	4798      	blx	r3
      }
      return;
 8002492:	e2dd      	b.n	8002a50 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 8123 	beq.w	80026e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800249e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80024a2:	4b8d      	ldr	r3, [pc, #564]	; (80026d8 <HAL_UART_IRQHandler+0x2b8>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80024aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80024ae:	4b8b      	ldr	r3, [pc, #556]	; (80026dc <HAL_UART_IRQHandler+0x2bc>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8116 	beq.w	80026e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80024b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d011      	beq.n	80024e8 <HAL_UART_IRQHandler+0xc8>
 80024c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00b      	beq.n	80024e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2201      	movs	r2, #1
 80024d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80024e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d011      	beq.n	8002518 <HAL_UART_IRQHandler+0xf8>
 80024f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00b      	beq.n	8002518 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2202      	movs	r2, #2
 8002506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	f043 0204 	orr.w	r2, r3, #4
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d011      	beq.n	8002548 <HAL_UART_IRQHandler+0x128>
 8002524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00b      	beq.n	8002548 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2204      	movs	r2, #4
 8002536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	f043 0202 	orr.w	r2, r3, #2
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d017      	beq.n	8002584 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	d105      	bne.n	800256c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002560:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002564:	4b5c      	ldr	r3, [pc, #368]	; (80026d8 <HAL_UART_IRQHandler+0x2b8>)
 8002566:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00b      	beq.n	8002584 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2208      	movs	r2, #8
 8002572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257a:	f043 0208 	orr.w	r2, r3, #8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258c:	2b00      	cmp	r3, #0
 800258e:	d012      	beq.n	80025b6 <HAL_UART_IRQHandler+0x196>
 8002590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002594:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00c      	beq.n	80025b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	f043 0220 	orr.w	r2, r3, #32
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8249 	beq.w	8002a54 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80025c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025c6:	f003 0320 	and.w	r3, r3, #32
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d013      	beq.n	80025f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80025ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80025da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d007      	beq.n	80025f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	d005      	beq.n	800261a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800260e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002612:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002616:	2b00      	cmp	r3, #0
 8002618:	d054      	beq.n	80026c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 ffea 	bl	80035f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262a:	2b40      	cmp	r3, #64	; 0x40
 800262c:	d146      	bne.n	80026bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	3308      	adds	r3, #8
 8002634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002638:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800263c:	e853 3f00 	ldrex	r3, [r3]
 8002640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002644:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800264c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	3308      	adds	r3, #8
 8002656:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800265a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800265e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002662:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002666:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800266a:	e841 2300 	strex	r3, r2, [r1]
 800266e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1d9      	bne.n	800262e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002680:	2b00      	cmp	r3, #0
 8002682:	d017      	beq.n	80026b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800268a:	4a15      	ldr	r2, [pc, #84]	; (80026e0 <HAL_UART_IRQHandler+0x2c0>)
 800268c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe fc0b 	bl	8000eb0 <HAL_DMA_Abort_IT>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d019      	beq.n	80026d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80026ae:	4610      	mov	r0, r2
 80026b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b2:	e00f      	b.n	80026d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f9eb 	bl	8002a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ba:	e00b      	b.n	80026d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f9e7 	bl	8002a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c2:	e007      	b.n	80026d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f9e3 	bl	8002a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80026d2:	e1bf      	b.n	8002a54 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d4:	bf00      	nop
    return;
 80026d6:	e1bd      	b.n	8002a54 <HAL_UART_IRQHandler+0x634>
 80026d8:	10000001 	.word	0x10000001
 80026dc:	04000120 	.word	0x04000120
 80026e0:	080036c1 	.word	0x080036c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	f040 8153 	bne.w	8002994 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80026ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 814c 	beq.w	8002994 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80026fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 8145 	beq.w	8002994 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2210      	movs	r2, #16
 8002710:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	f040 80bb 	bne.w	8002898 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002730:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 818f 	beq.w	8002a58 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002740:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002744:	429a      	cmp	r2, r3
 8002746:	f080 8187 	bcs.w	8002a58 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002750:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 8087 	bne.w	8002876 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002770:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002774:	e853 3f00 	ldrex	r3, [r3]
 8002778:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800277c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002796:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800279e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027a2:	e841 2300 	strex	r3, r2, [r1]
 80027a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1da      	bne.n	8002768 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	3308      	adds	r3, #8
 80027b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027bc:	e853 3f00 	ldrex	r3, [r3]
 80027c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3308      	adds	r3, #8
 80027d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027e2:	e841 2300 	strex	r3, r2, [r1]
 80027e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80027e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1e1      	bne.n	80027b2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3308      	adds	r3, #8
 80027f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027f8:	e853 3f00 	ldrex	r3, [r3]
 80027fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80027fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	3308      	adds	r3, #8
 800280e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002812:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002814:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002816:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002818:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800281a:	e841 2300 	strex	r3, r2, [r1]
 800281e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1e3      	bne.n	80027ee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2220      	movs	r2, #32
 800282a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800283c:	e853 3f00 	ldrex	r3, [r3]
 8002840:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002844:	f023 0310 	bic.w	r3, r3, #16
 8002848:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002856:	65bb      	str	r3, [r7, #88]	; 0x58
 8002858:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800285c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800285e:	e841 2300 	strex	r3, r2, [r1]
 8002862:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1e4      	bne.n	8002834 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe fac4 	bl	8000dfe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2202      	movs	r2, #2
 800287a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002888:	b29b      	uxth	r3, r3
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	b29b      	uxth	r3, r3
 800288e:	4619      	mov	r1, r3
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7fd fe3f 	bl	8000514 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002896:	e0df      	b.n	8002a58 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80d1 	beq.w	8002a5c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80028ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 80cc 	beq.w	8002a5c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028cc:	e853 3f00 	ldrex	r3, [r3]
 80028d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028e6:	647b      	str	r3, [r7, #68]	; 0x44
 80028e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028ee:	e841 2300 	strex	r3, r2, [r1]
 80028f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80028f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1e4      	bne.n	80028c4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3308      	adds	r3, #8
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	e853 3f00 	ldrex	r3, [r3]
 8002908:	623b      	str	r3, [r7, #32]
   return(result);
 800290a:	6a3b      	ldr	r3, [r7, #32]
 800290c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	3308      	adds	r3, #8
 800291e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002922:	633a      	str	r2, [r7, #48]	; 0x30
 8002924:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800292a:	e841 2300 	strex	r3, r2, [r1]
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1e1      	bne.n	80028fa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	e853 3f00 	ldrex	r3, [r3]
 8002956:	60fb      	str	r3, [r7, #12]
   return(result);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0310 	bic.w	r3, r3, #16
 800295e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800296c:	61fb      	str	r3, [r7, #28]
 800296e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002970:	69b9      	ldr	r1, [r7, #24]
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	e841 2300 	strex	r3, r2, [r1]
 8002978:	617b      	str	r3, [r7, #20]
   return(result);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1e4      	bne.n	800294a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002986:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800298a:	4619      	mov	r1, r3
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7fd fdc1 	bl	8000514 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002992:	e063      	b.n	8002a5c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00e      	beq.n	80029be <HAL_UART_IRQHandler+0x59e>
 80029a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f001 fd82 	bl	80044c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029bc:	e051      	b.n	8002a62 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80029be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d014      	beq.n	80029f4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80029ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80029d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d008      	beq.n	80029f4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d03a      	beq.n	8002a60 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	4798      	blx	r3
    }
    return;
 80029f2:	e035      	b.n	8002a60 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80029f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d009      	beq.n	8002a14 <HAL_UART_IRQHandler+0x5f4>
 8002a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f001 f80f 	bl	8003a30 <UART_EndTransmit_IT>
    return;
 8002a12:	e026      	b.n	8002a62 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d009      	beq.n	8002a34 <HAL_UART_IRQHandler+0x614>
 8002a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f001 fd5b 	bl	80044e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a32:	e016      	b.n	8002a62 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d010      	beq.n	8002a62 <HAL_UART_IRQHandler+0x642>
 8002a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	da0c      	bge.n	8002a62 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f001 fd43 	bl	80044d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a4e:	e008      	b.n	8002a62 <HAL_UART_IRQHandler+0x642>
      return;
 8002a50:	bf00      	nop
 8002a52:	e006      	b.n	8002a62 <HAL_UART_IRQHandler+0x642>
    return;
 8002a54:	bf00      	nop
 8002a56:	e004      	b.n	8002a62 <HAL_UART_IRQHandler+0x642>
      return;
 8002a58:	bf00      	nop
 8002a5a:	e002      	b.n	8002a62 <HAL_UART_IRQHandler+0x642>
      return;
 8002a5c:	bf00      	nop
 8002a5e:	e000      	b.n	8002a62 <HAL_UART_IRQHandler+0x642>
    return;
 8002a60:	bf00      	nop
  }
}
 8002a62:	37e8      	adds	r7, #232	; 0xe8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa8:	b08c      	sub	sp, #48	; 0x30
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	431a      	orrs	r2, r3
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4bab      	ldr	r3, [pc, #684]	; (8002d80 <UART_SetConfig+0x2dc>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002adc:	430b      	orrs	r3, r1
 8002ade:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4aa0      	ldr	r2, [pc, #640]	; (8002d84 <UART_SetConfig+0x2e0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d004      	beq.n	8002b10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002b1a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b24:	430b      	orrs	r3, r1
 8002b26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	f023 010f 	bic.w	r1, r3, #15
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a91      	ldr	r2, [pc, #580]	; (8002d88 <UART_SetConfig+0x2e4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d125      	bne.n	8002b94 <UART_SetConfig+0xf0>
 8002b48:	4b90      	ldr	r3, [pc, #576]	; (8002d8c <UART_SetConfig+0x2e8>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d81a      	bhi.n	8002b8c <UART_SetConfig+0xe8>
 8002b56:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <UART_SetConfig+0xb8>)
 8002b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5c:	08002b6d 	.word	0x08002b6d
 8002b60:	08002b7d 	.word	0x08002b7d
 8002b64:	08002b75 	.word	0x08002b75
 8002b68:	08002b85 	.word	0x08002b85
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b72:	e0d6      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002b74:	2302      	movs	r3, #2
 8002b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b7a:	e0d2      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b82:	e0ce      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002b84:	2308      	movs	r3, #8
 8002b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b8a:	e0ca      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002b8c:	2310      	movs	r3, #16
 8002b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b92:	e0c6      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a7d      	ldr	r2, [pc, #500]	; (8002d90 <UART_SetConfig+0x2ec>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d138      	bne.n	8002c10 <UART_SetConfig+0x16c>
 8002b9e:	4b7b      	ldr	r3, [pc, #492]	; (8002d8c <UART_SetConfig+0x2e8>)
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba4:	f003 030c 	and.w	r3, r3, #12
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	d82d      	bhi.n	8002c08 <UART_SetConfig+0x164>
 8002bac:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <UART_SetConfig+0x110>)
 8002bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb2:	bf00      	nop
 8002bb4:	08002be9 	.word	0x08002be9
 8002bb8:	08002c09 	.word	0x08002c09
 8002bbc:	08002c09 	.word	0x08002c09
 8002bc0:	08002c09 	.word	0x08002c09
 8002bc4:	08002bf9 	.word	0x08002bf9
 8002bc8:	08002c09 	.word	0x08002c09
 8002bcc:	08002c09 	.word	0x08002c09
 8002bd0:	08002c09 	.word	0x08002c09
 8002bd4:	08002bf1 	.word	0x08002bf1
 8002bd8:	08002c09 	.word	0x08002c09
 8002bdc:	08002c09 	.word	0x08002c09
 8002be0:	08002c09 	.word	0x08002c09
 8002be4:	08002c01 	.word	0x08002c01
 8002be8:	2300      	movs	r3, #0
 8002bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bee:	e098      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bf6:	e094      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bfe:	e090      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002c00:	2308      	movs	r3, #8
 8002c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c06:	e08c      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002c08:	2310      	movs	r3, #16
 8002c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c0e:	e088      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a5f      	ldr	r2, [pc, #380]	; (8002d94 <UART_SetConfig+0x2f0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d125      	bne.n	8002c66 <UART_SetConfig+0x1c2>
 8002c1a:	4b5c      	ldr	r3, [pc, #368]	; (8002d8c <UART_SetConfig+0x2e8>)
 8002c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c24:	2b30      	cmp	r3, #48	; 0x30
 8002c26:	d016      	beq.n	8002c56 <UART_SetConfig+0x1b2>
 8002c28:	2b30      	cmp	r3, #48	; 0x30
 8002c2a:	d818      	bhi.n	8002c5e <UART_SetConfig+0x1ba>
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d00a      	beq.n	8002c46 <UART_SetConfig+0x1a2>
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d814      	bhi.n	8002c5e <UART_SetConfig+0x1ba>
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <UART_SetConfig+0x19a>
 8002c38:	2b10      	cmp	r3, #16
 8002c3a:	d008      	beq.n	8002c4e <UART_SetConfig+0x1aa>
 8002c3c:	e00f      	b.n	8002c5e <UART_SetConfig+0x1ba>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c44:	e06d      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002c46:	2302      	movs	r3, #2
 8002c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c4c:	e069      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002c4e:	2304      	movs	r3, #4
 8002c50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c54:	e065      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002c56:	2308      	movs	r3, #8
 8002c58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c5c:	e061      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002c5e:	2310      	movs	r3, #16
 8002c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c64:	e05d      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a4b      	ldr	r2, [pc, #300]	; (8002d98 <UART_SetConfig+0x2f4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d125      	bne.n	8002cbc <UART_SetConfig+0x218>
 8002c70:	4b46      	ldr	r3, [pc, #280]	; (8002d8c <UART_SetConfig+0x2e8>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c7a:	2bc0      	cmp	r3, #192	; 0xc0
 8002c7c:	d016      	beq.n	8002cac <UART_SetConfig+0x208>
 8002c7e:	2bc0      	cmp	r3, #192	; 0xc0
 8002c80:	d818      	bhi.n	8002cb4 <UART_SetConfig+0x210>
 8002c82:	2b80      	cmp	r3, #128	; 0x80
 8002c84:	d00a      	beq.n	8002c9c <UART_SetConfig+0x1f8>
 8002c86:	2b80      	cmp	r3, #128	; 0x80
 8002c88:	d814      	bhi.n	8002cb4 <UART_SetConfig+0x210>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <UART_SetConfig+0x1f0>
 8002c8e:	2b40      	cmp	r3, #64	; 0x40
 8002c90:	d008      	beq.n	8002ca4 <UART_SetConfig+0x200>
 8002c92:	e00f      	b.n	8002cb4 <UART_SetConfig+0x210>
 8002c94:	2300      	movs	r3, #0
 8002c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c9a:	e042      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ca2:	e03e      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002caa:	e03a      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002cac:	2308      	movs	r3, #8
 8002cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cb2:	e036      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cba:	e032      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a30      	ldr	r2, [pc, #192]	; (8002d84 <UART_SetConfig+0x2e0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d12a      	bne.n	8002d1c <UART_SetConfig+0x278>
 8002cc6:	4b31      	ldr	r3, [pc, #196]	; (8002d8c <UART_SetConfig+0x2e8>)
 8002cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ccc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002cd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cd4:	d01a      	beq.n	8002d0c <UART_SetConfig+0x268>
 8002cd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cda:	d81b      	bhi.n	8002d14 <UART_SetConfig+0x270>
 8002cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ce0:	d00c      	beq.n	8002cfc <UART_SetConfig+0x258>
 8002ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ce6:	d815      	bhi.n	8002d14 <UART_SetConfig+0x270>
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <UART_SetConfig+0x250>
 8002cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf0:	d008      	beq.n	8002d04 <UART_SetConfig+0x260>
 8002cf2:	e00f      	b.n	8002d14 <UART_SetConfig+0x270>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cfa:	e012      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d02:	e00e      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002d04:	2304      	movs	r3, #4
 8002d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d0a:	e00a      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002d0c:	2308      	movs	r3, #8
 8002d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d12:	e006      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002d14:	2310      	movs	r3, #16
 8002d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d1a:	e002      	b.n	8002d22 <UART_SetConfig+0x27e>
 8002d1c:	2310      	movs	r3, #16
 8002d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <UART_SetConfig+0x2e0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	f040 80a8 	bne.w	8002e7e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d834      	bhi.n	8002da0 <UART_SetConfig+0x2fc>
 8002d36:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <UART_SetConfig+0x298>)
 8002d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3c:	08002d61 	.word	0x08002d61
 8002d40:	08002da1 	.word	0x08002da1
 8002d44:	08002d69 	.word	0x08002d69
 8002d48:	08002da1 	.word	0x08002da1
 8002d4c:	08002d6f 	.word	0x08002d6f
 8002d50:	08002da1 	.word	0x08002da1
 8002d54:	08002da1 	.word	0x08002da1
 8002d58:	08002da1 	.word	0x08002da1
 8002d5c:	08002d77 	.word	0x08002d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d60:	f7ff f818 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 8002d64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002d66:	e021      	b.n	8002dac <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <UART_SetConfig+0x2f8>)
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002d6c:	e01e      	b.n	8002dac <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d6e:	f7fe ffa3 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 8002d72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002d74:	e01a      	b.n	8002dac <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002d7c:	e016      	b.n	8002dac <UART_SetConfig+0x308>
 8002d7e:	bf00      	nop
 8002d80:	cfff69f3 	.word	0xcfff69f3
 8002d84:	40008000 	.word	0x40008000
 8002d88:	40013800 	.word	0x40013800
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40004400 	.word	0x40004400
 8002d94:	40004800 	.word	0x40004800
 8002d98:	40004c00 	.word	0x40004c00
 8002d9c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002daa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 812a 	beq.w	8003008 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	4a9e      	ldr	r2, [pc, #632]	; (8003034 <UART_SetConfig+0x590>)
 8002dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	4413      	add	r3, r2
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d305      	bcc.n	8002de4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d903      	bls.n	8002dec <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002dea:	e10d      	b.n	8003008 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	2200      	movs	r2, #0
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	60fa      	str	r2, [r7, #12]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	4a8e      	ldr	r2, [pc, #568]	; (8003034 <UART_SetConfig+0x590>)
 8002dfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2200      	movs	r2, #0
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	607a      	str	r2, [r7, #4]
 8002e06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e0e:	f7fd fa03 	bl	8000218 <__aeabi_uldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4610      	mov	r0, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	020b      	lsls	r3, r1, #8
 8002e24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002e28:	0202      	lsls	r2, r0, #8
 8002e2a:	6979      	ldr	r1, [r7, #20]
 8002e2c:	6849      	ldr	r1, [r1, #4]
 8002e2e:	0849      	lsrs	r1, r1, #1
 8002e30:	2000      	movs	r0, #0
 8002e32:	460c      	mov	r4, r1
 8002e34:	4605      	mov	r5, r0
 8002e36:	eb12 0804 	adds.w	r8, r2, r4
 8002e3a:	eb43 0905 	adc.w	r9, r3, r5
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	469a      	mov	sl, r3
 8002e46:	4693      	mov	fp, r2
 8002e48:	4652      	mov	r2, sl
 8002e4a:	465b      	mov	r3, fp
 8002e4c:	4640      	mov	r0, r8
 8002e4e:	4649      	mov	r1, r9
 8002e50:	f7fd f9e2 	bl	8000218 <__aeabi_uldivmod>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4613      	mov	r3, r2
 8002e5a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e62:	d308      	bcc.n	8002e76 <UART_SetConfig+0x3d2>
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e6a:	d204      	bcs.n	8002e76 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6a3a      	ldr	r2, [r7, #32]
 8002e72:	60da      	str	r2, [r3, #12]
 8002e74:	e0c8      	b.n	8003008 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002e7c:	e0c4      	b.n	8003008 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e86:	d167      	bne.n	8002f58 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002e88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d828      	bhi.n	8002ee2 <UART_SetConfig+0x43e>
 8002e90:	a201      	add	r2, pc, #4	; (adr r2, 8002e98 <UART_SetConfig+0x3f4>)
 8002e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e96:	bf00      	nop
 8002e98:	08002ebd 	.word	0x08002ebd
 8002e9c:	08002ec5 	.word	0x08002ec5
 8002ea0:	08002ecd 	.word	0x08002ecd
 8002ea4:	08002ee3 	.word	0x08002ee3
 8002ea8:	08002ed3 	.word	0x08002ed3
 8002eac:	08002ee3 	.word	0x08002ee3
 8002eb0:	08002ee3 	.word	0x08002ee3
 8002eb4:	08002ee3 	.word	0x08002ee3
 8002eb8:	08002edb 	.word	0x08002edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ebc:	f7fe ff6a 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 8002ec0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ec2:	e014      	b.n	8002eee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ec4:	f7fe ff7c 	bl	8001dc0 <HAL_RCC_GetPCLK2Freq>
 8002ec8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002eca:	e010      	b.n	8002eee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ecc:	4b5a      	ldr	r3, [pc, #360]	; (8003038 <UART_SetConfig+0x594>)
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ed0:	e00d      	b.n	8002eee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ed2:	f7fe fef1 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 8002ed6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ed8:	e009      	b.n	8002eee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ee0:	e005      	b.n	8002eee <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002eec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 8089 	beq.w	8003008 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	4a4e      	ldr	r2, [pc, #312]	; (8003034 <UART_SetConfig+0x590>)
 8002efc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f00:	461a      	mov	r2, r3
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f08:	005a      	lsls	r2, r3, #1
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	085b      	lsrs	r3, r3, #1
 8002f10:	441a      	add	r2, r3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	2b0f      	cmp	r3, #15
 8002f20:	d916      	bls.n	8002f50 <UART_SetConfig+0x4ac>
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f28:	d212      	bcs.n	8002f50 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f023 030f 	bic.w	r3, r3, #15
 8002f32:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	085b      	lsrs	r3, r3, #1
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	8bfb      	ldrh	r3, [r7, #30]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	8bfa      	ldrh	r2, [r7, #30]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	e05b      	b.n	8003008 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002f56:	e057      	b.n	8003008 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d828      	bhi.n	8002fb2 <UART_SetConfig+0x50e>
 8002f60:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <UART_SetConfig+0x4c4>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002f8d 	.word	0x08002f8d
 8002f6c:	08002f95 	.word	0x08002f95
 8002f70:	08002f9d 	.word	0x08002f9d
 8002f74:	08002fb3 	.word	0x08002fb3
 8002f78:	08002fa3 	.word	0x08002fa3
 8002f7c:	08002fb3 	.word	0x08002fb3
 8002f80:	08002fb3 	.word	0x08002fb3
 8002f84:	08002fb3 	.word	0x08002fb3
 8002f88:	08002fab 	.word	0x08002fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f8c:	f7fe ff02 	bl	8001d94 <HAL_RCC_GetPCLK1Freq>
 8002f90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f92:	e014      	b.n	8002fbe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f94:	f7fe ff14 	bl	8001dc0 <HAL_RCC_GetPCLK2Freq>
 8002f98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f9a:	e010      	b.n	8002fbe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f9c:	4b26      	ldr	r3, [pc, #152]	; (8003038 <UART_SetConfig+0x594>)
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002fa0:	e00d      	b.n	8002fbe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fa2:	f7fe fe89 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 8002fa6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002fa8:	e009      	b.n	8002fbe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002fb0:	e005      	b.n	8002fbe <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002fbc:	bf00      	nop
    }

    if (pclk != 0U)
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d021      	beq.n	8003008 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	4a1a      	ldr	r2, [pc, #104]	; (8003034 <UART_SetConfig+0x590>)
 8002fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	085b      	lsrs	r3, r3, #1
 8002fdc:	441a      	add	r2, r3
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	2b0f      	cmp	r3, #15
 8002fec:	d909      	bls.n	8003002 <UART_SetConfig+0x55e>
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff4:	d205      	bcs.n	8003002 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60da      	str	r2, [r3, #12]
 8003000:	e002      	b.n	8003008 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2201      	movs	r2, #1
 800300c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2201      	movs	r2, #1
 8003014:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2200      	movs	r2, #0
 800301c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2200      	movs	r2, #0
 8003022:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003024:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003028:	4618      	mov	r0, r3
 800302a:	3730      	adds	r7, #48	; 0x30
 800302c:	46bd      	mov	sp, r7
 800302e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003032:	bf00      	nop
 8003034:	08004848 	.word	0x08004848
 8003038:	00f42400 	.word	0x00f42400

0800303c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01a      	beq.n	8003152 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800313a:	d10a      	bne.n	8003152 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	605a      	str	r2, [r3, #4]
  }
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b098      	sub	sp, #96	; 0x60
 8003184:	af02      	add	r7, sp, #8
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003190:	f7fd fd1a 	bl	8000bc8 <HAL_GetTick>
 8003194:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d12f      	bne.n	8003204 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ac:	2200      	movs	r2, #0
 80031ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f88e 	bl	80032d4 <UART_WaitOnFlagUntilTimeout>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d022      	beq.n	8003204 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c6:	e853 3f00 	ldrex	r3, [r3]
 80031ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031d2:	653b      	str	r3, [r7, #80]	; 0x50
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031dc:	647b      	str	r3, [r7, #68]	; 0x44
 80031de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031e4:	e841 2300 	strex	r3, r2, [r1]
 80031e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1e6      	bne.n	80031be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e063      	b.n	80032cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b04      	cmp	r3, #4
 8003210:	d149      	bne.n	80032a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003212:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800321a:	2200      	movs	r2, #0
 800321c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f857 	bl	80032d4 <UART_WaitOnFlagUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d03c      	beq.n	80032a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	e853 3f00 	ldrex	r3, [r3]
 8003238:	623b      	str	r3, [r7, #32]
   return(result);
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003240:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800324a:	633b      	str	r3, [r7, #48]	; 0x30
 800324c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003252:	e841 2300 	strex	r3, r2, [r1]
 8003256:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1e6      	bne.n	800322c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3308      	adds	r3, #8
 8003264:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	60fb      	str	r3, [r7, #12]
   return(result);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	64bb      	str	r3, [r7, #72]	; 0x48
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3308      	adds	r3, #8
 800327c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800327e:	61fa      	str	r2, [r7, #28]
 8003280:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003282:	69b9      	ldr	r1, [r7, #24]
 8003284:	69fa      	ldr	r2, [r7, #28]
 8003286:	e841 2300 	strex	r3, r2, [r1]
 800328a:	617b      	str	r3, [r7, #20]
   return(result);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1e5      	bne.n	800325e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e012      	b.n	80032cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3758      	adds	r7, #88	; 0x58
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	4613      	mov	r3, r2
 80032e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032e4:	e04f      	b.n	8003386 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d04b      	beq.n	8003386 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ee:	f7fd fc6b 	bl	8000bc8 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d302      	bcc.n	8003304 <UART_WaitOnFlagUntilTimeout+0x30>
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e04e      	b.n	80033a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	d037      	beq.n	8003386 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b80      	cmp	r3, #128	; 0x80
 800331a:	d034      	beq.n	8003386 <UART_WaitOnFlagUntilTimeout+0xb2>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b40      	cmp	r3, #64	; 0x40
 8003320:	d031      	beq.n	8003386 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b08      	cmp	r3, #8
 800332e:	d110      	bne.n	8003352 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2208      	movs	r2, #8
 8003336:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f95b 	bl	80035f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2208      	movs	r2, #8
 8003342:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e029      	b.n	80033a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800335c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003360:	d111      	bne.n	8003386 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800336a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f941 	bl	80035f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e00f      	b.n	80033a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4013      	ands	r3, r2
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	429a      	cmp	r2, r3
 8003394:	bf0c      	ite	eq
 8003396:	2301      	moveq	r3, #1
 8003398:	2300      	movne	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d0a0      	beq.n	80032e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
	...

080033b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b0a3      	sub	sp, #140	; 0x8c
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	4613      	mov	r3, r2
 80033bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	88fa      	ldrh	r2, [r7, #6]
 80033c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	88fa      	ldrh	r2, [r7, #6]
 80033d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e2:	d10e      	bne.n	8003402 <UART_Start_Receive_IT+0x52>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d105      	bne.n	80033f8 <UART_Start_Receive_IT+0x48>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80033f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80033f6:	e02d      	b.n	8003454 <UART_Start_Receive_IT+0xa4>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	22ff      	movs	r2, #255	; 0xff
 80033fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003400:	e028      	b.n	8003454 <UART_Start_Receive_IT+0xa4>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10d      	bne.n	8003426 <UART_Start_Receive_IT+0x76>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d104      	bne.n	800341c <UART_Start_Receive_IT+0x6c>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	22ff      	movs	r2, #255	; 0xff
 8003416:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800341a:	e01b      	b.n	8003454 <UART_Start_Receive_IT+0xa4>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	227f      	movs	r2, #127	; 0x7f
 8003420:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003424:	e016      	b.n	8003454 <UART_Start_Receive_IT+0xa4>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800342e:	d10d      	bne.n	800344c <UART_Start_Receive_IT+0x9c>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d104      	bne.n	8003442 <UART_Start_Receive_IT+0x92>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	227f      	movs	r2, #127	; 0x7f
 800343c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003440:	e008      	b.n	8003454 <UART_Start_Receive_IT+0xa4>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	223f      	movs	r2, #63	; 0x3f
 8003446:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800344a:	e003      	b.n	8003454 <UART_Start_Receive_IT+0xa4>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2222      	movs	r2, #34	; 0x22
 8003460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3308      	adds	r3, #8
 800346a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003474:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3308      	adds	r3, #8
 8003484:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003488:	673a      	str	r2, [r7, #112]	; 0x70
 800348a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800348e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003490:	e841 2300 	strex	r3, r2, [r1]
 8003494:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e3      	bne.n	8003464 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a4:	d14f      	bne.n	8003546 <UART_Start_Receive_IT+0x196>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80034ac:	88fa      	ldrh	r2, [r7, #6]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d349      	bcc.n	8003546 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ba:	d107      	bne.n	80034cc <UART_Start_Receive_IT+0x11c>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d103      	bne.n	80034cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a47      	ldr	r2, [pc, #284]	; (80035e4 <UART_Start_Receive_IT+0x234>)
 80034c8:	675a      	str	r2, [r3, #116]	; 0x74
 80034ca:	e002      	b.n	80034d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	4a46      	ldr	r2, [pc, #280]	; (80035e8 <UART_Start_Receive_IT+0x238>)
 80034d0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d01a      	beq.n	8003510 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80034e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034fe:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003502:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800350a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e4      	bne.n	80034da <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3308      	adds	r3, #8
 8003516:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800351a:	e853 3f00 	ldrex	r3, [r3]
 800351e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003526:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3308      	adds	r3, #8
 800352e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003530:	64ba      	str	r2, [r7, #72]	; 0x48
 8003532:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003534:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003536:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003538:	e841 2300 	strex	r3, r2, [r1]
 800353c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800353e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e5      	bne.n	8003510 <UART_Start_Receive_IT+0x160>
 8003544:	e046      	b.n	80035d4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354e:	d107      	bne.n	8003560 <UART_Start_Receive_IT+0x1b0>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d103      	bne.n	8003560 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4a24      	ldr	r2, [pc, #144]	; (80035ec <UART_Start_Receive_IT+0x23c>)
 800355c:	675a      	str	r2, [r3, #116]	; 0x74
 800355e:	e002      	b.n	8003566 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4a23      	ldr	r2, [pc, #140]	; (80035f0 <UART_Start_Receive_IT+0x240>)
 8003564:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d019      	beq.n	80035a2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	e853 3f00 	ldrex	r3, [r3]
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003582:	677b      	str	r3, [r7, #116]	; 0x74
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	461a      	mov	r2, r3
 800358a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800358c:	637b      	str	r3, [r7, #52]	; 0x34
 800358e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003590:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003594:	e841 2300 	strex	r3, r2, [r1]
 8003598:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e6      	bne.n	800356e <UART_Start_Receive_IT+0x1be>
 80035a0:	e018      	b.n	80035d4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	e853 3f00 	ldrex	r3, [r3]
 80035ae:	613b      	str	r3, [r7, #16]
   return(result);
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f043 0320 	orr.w	r3, r3, #32
 80035b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	461a      	mov	r2, r3
 80035be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035c0:	623b      	str	r3, [r7, #32]
 80035c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c4:	69f9      	ldr	r1, [r7, #28]
 80035c6:	6a3a      	ldr	r2, [r7, #32]
 80035c8:	e841 2300 	strex	r3, r2, [r1]
 80035cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e6      	bne.n	80035a2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	378c      	adds	r7, #140	; 0x8c
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	08004159 	.word	0x08004159
 80035e8:	08003df9 	.word	0x08003df9
 80035ec:	08003c41 	.word	0x08003c41
 80035f0:	08003a89 	.word	0x08003a89

080035f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b095      	sub	sp, #84	; 0x54
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003604:	e853 3f00 	ldrex	r3, [r3]
 8003608:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003610:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800361a:	643b      	str	r3, [r7, #64]	; 0x40
 800361c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003620:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003622:	e841 2300 	strex	r3, r2, [r1]
 8003626:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1e6      	bne.n	80035fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3308      	adds	r3, #8
 8003634:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	e853 3f00 	ldrex	r3, [r3]
 800363c:	61fb      	str	r3, [r7, #28]
   return(result);
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003644:	f023 0301 	bic.w	r3, r3, #1
 8003648:	64bb      	str	r3, [r7, #72]	; 0x48
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3308      	adds	r3, #8
 8003650:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003652:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800365a:	e841 2300 	strex	r3, r2, [r1]
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1e3      	bne.n	800362e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800366a:	2b01      	cmp	r3, #1
 800366c:	d118      	bne.n	80036a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	60bb      	str	r3, [r7, #8]
   return(result);
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f023 0310 	bic.w	r3, r3, #16
 8003682:	647b      	str	r3, [r7, #68]	; 0x44
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	6979      	ldr	r1, [r7, #20]
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	613b      	str	r3, [r7, #16]
   return(result);
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e6      	bne.n	800366e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80036b4:	bf00      	nop
 80036b6:	3754      	adds	r7, #84	; 0x54
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f7ff f9d6 	bl	8002a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036e4:	bf00      	nop
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b08f      	sub	sp, #60	; 0x3c
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	2b21      	cmp	r3, #33	; 0x21
 80036fc:	d14c      	bne.n	8003798 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d132      	bne.n	8003770 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	e853 3f00 	ldrex	r3, [r3]
 8003716:	61fb      	str	r3, [r7, #28]
   return(result);
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800371e:	637b      	str	r3, [r7, #52]	; 0x34
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800372a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800372e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003730:	e841 2300 	strex	r3, r2, [r1]
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e6      	bne.n	800370a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	e853 3f00 	ldrex	r3, [r3]
 8003748:	60bb      	str	r3, [r7, #8]
   return(result);
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003750:	633b      	str	r3, [r7, #48]	; 0x30
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375a:	61bb      	str	r3, [r7, #24]
 800375c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375e:	6979      	ldr	r1, [r7, #20]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	e841 2300 	strex	r3, r2, [r1]
 8003766:	613b      	str	r3, [r7, #16]
   return(result);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1e6      	bne.n	800373c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800376e:	e013      	b.n	8003798 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003774:	781a      	ldrb	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003798:	bf00      	nop
 800379a:	373c      	adds	r7, #60	; 0x3c
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b091      	sub	sp, #68	; 0x44
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	2b21      	cmp	r3, #33	; 0x21
 80037b4:	d151      	bne.n	800385a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d132      	bne.n	8003828 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	e853 3f00 	ldrex	r3, [r3]
 80037ce:	623b      	str	r3, [r7, #32]
   return(result);
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e0:	633b      	str	r3, [r7, #48]	; 0x30
 80037e2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e6      	bne.n	80037c2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	60fb      	str	r3, [r7, #12]
   return(result);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003808:	637b      	str	r3, [r7, #52]	; 0x34
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003812:	61fb      	str	r3, [r7, #28]
 8003814:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003816:	69b9      	ldr	r1, [r7, #24]
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	617b      	str	r3, [r7, #20]
   return(result);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e6      	bne.n	80037f4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003826:	e018      	b.n	800385a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800382e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800383c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003842:	1c9a      	adds	r2, r3, #2
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800385a:	bf00      	nop
 800385c:	3744      	adds	r7, #68	; 0x44
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003866:	b480      	push	{r7}
 8003868:	b091      	sub	sp, #68	; 0x44
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	2b21      	cmp	r3, #33	; 0x21
 8003876:	d160      	bne.n	800393a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800387e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003880:	e057      	b.n	8003932 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d133      	bne.n	80038f6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3308      	adds	r3, #8
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	623b      	str	r3, [r7, #32]
   return(result);
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3308      	adds	r3, #8
 80038ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038ae:	633a      	str	r2, [r7, #48]	; 0x30
 80038b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b6:	e841 2300 	strex	r3, r2, [r1]
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1e5      	bne.n	800388e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	e853 3f00 	ldrex	r3, [r3]
 80038ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038d6:	637b      	str	r3, [r7, #52]	; 0x34
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e4:	69b9      	ldr	r1, [r7, #24]
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	e841 2300 	strex	r3, r2, [r1]
 80038ec:	617b      	str	r3, [r7, #20]
   return(result);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1e6      	bne.n	80038c2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80038f4:	e021      	b.n	800393a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003900:	2b00      	cmp	r3, #0
 8003902:	d013      	beq.n	800392c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003908:	781a      	ldrb	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800392c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800392e:	3b01      	subs	r3, #1
 8003930:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003932:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1a4      	bne.n	8003882 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003938:	e7ff      	b.n	800393a <UART_TxISR_8BIT_FIFOEN+0xd4>
 800393a:	bf00      	nop
 800393c:	3744      	adds	r7, #68	; 0x44
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003946:	b480      	push	{r7}
 8003948:	b091      	sub	sp, #68	; 0x44
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003954:	2b21      	cmp	r3, #33	; 0x21
 8003956:	d165      	bne.n	8003a24 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800395e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003960:	e05c      	b.n	8003a1c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d133      	bne.n	80039d6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3308      	adds	r3, #8
 8003974:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	61fb      	str	r3, [r7, #28]
   return(result);
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003984:	637b      	str	r3, [r7, #52]	; 0x34
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3308      	adds	r3, #8
 800398c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800398e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e5      	bne.n	800396e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	e853 3f00 	ldrex	r3, [r3]
 80039ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b6:	633b      	str	r3, [r7, #48]	; 0x30
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c4:	6979      	ldr	r1, [r7, #20]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	e841 2300 	strex	r3, r2, [r1]
 80039cc:	613b      	str	r3, [r7, #16]
   return(result);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e6      	bne.n	80039a2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80039d4:	e026      	b.n	8003a24 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d018      	beq.n	8003a16 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fe:	1c9a      	adds	r2, r3, #2
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003a16:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003a1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d19f      	bne.n	8003962 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003a22:	e7ff      	b.n	8003a24 <UART_TxISR_16BIT_FIFOEN+0xde>
 8003a24:	bf00      	nop
 8003a26:	3744      	adds	r7, #68	; 0x44
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b088      	sub	sp, #32
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	61bb      	str	r3, [r7, #24]
 8003a58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5a:	6979      	ldr	r1, [r7, #20]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	e841 2300 	strex	r3, r2, [r1]
 8003a62:	613b      	str	r3, [r7, #16]
   return(result);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e6      	bne.n	8003a38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7fe fff5 	bl	8002a68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a7e:	bf00      	nop
 8003a80:	3720      	adds	r7, #32
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b09c      	sub	sp, #112	; 0x70
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003a96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa0:	2b22      	cmp	r3, #34	; 0x22
 8003aa2:	f040 80be 	bne.w	8003c22 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ab0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003ab4:	b2d9      	uxtb	r1, r3
 8003ab6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f040 80a1 	bne.w	8003c32 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af8:	e853 3f00 	ldrex	r3, [r3]
 8003afc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b04:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b10:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e6      	bne.n	8003af0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3308      	adds	r3, #8
 8003b28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2c:	e853 3f00 	ldrex	r3, [r3]
 8003b30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	667b      	str	r3, [r7, #100]	; 0x64
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3308      	adds	r3, #8
 8003b40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003b42:	647a      	str	r2, [r7, #68]	; 0x44
 8003b44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e5      	bne.n	8003b22 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a33      	ldr	r2, [pc, #204]	; (8003c3c <UART_RxISR_8BIT+0x1b4>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d01f      	beq.n	8003bb4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d018      	beq.n	8003bb4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	623b      	str	r3, [r7, #32]
   return(result);
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b96:	663b      	str	r3, [r7, #96]	; 0x60
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e6      	bne.n	8003b82 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d12e      	bne.n	8003c1a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0310 	bic.w	r3, r3, #16
 8003bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	69b9      	ldr	r1, [r7, #24]
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	617b      	str	r3, [r7, #20]
   return(result);
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e6      	bne.n	8003bc2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	2b10      	cmp	r3, #16
 8003c00:	d103      	bne.n	8003c0a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2210      	movs	r2, #16
 8003c08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c10:	4619      	mov	r1, r3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fc fc7e 	bl	8000514 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c18:	e00b      	b.n	8003c32 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fe ff2e 	bl	8002a7c <HAL_UART_RxCpltCallback>
}
 8003c20:	e007      	b.n	8003c32 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699a      	ldr	r2, [r3, #24]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0208 	orr.w	r2, r2, #8
 8003c30:	619a      	str	r2, [r3, #24]
}
 8003c32:	bf00      	nop
 8003c34:	3770      	adds	r7, #112	; 0x70
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40008000 	.word	0x40008000

08003c40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b09c      	sub	sp, #112	; 0x70
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003c4e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c58:	2b22      	cmp	r3, #34	; 0x22
 8003c5a:	f040 80be 	bne.w	8003dda <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003c6e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003c72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003c76:	4013      	ands	r3, r2
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c82:	1c9a      	adds	r2, r3, #2
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f040 80a1 	bne.w	8003dea <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8003cc8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003ccc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cce:	e841 2300 	strex	r3, r2, [r1]
 8003cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1e6      	bne.n	8003ca8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3308      	adds	r3, #8
 8003ce0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	f023 0301 	bic.w	r3, r3, #1
 8003cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cfa:	643a      	str	r2, [r7, #64]	; 0x40
 8003cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e5      	bne.n	8003cda <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a33      	ldr	r2, [pc, #204]	; (8003df4 <UART_RxISR_16BIT+0x1b4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d01f      	beq.n	8003d6c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d018      	beq.n	8003d6c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	e853 3f00 	ldrex	r3, [r3]
 8003d46:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d5a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d60:	e841 2300 	strex	r3, r2, [r1]
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e6      	bne.n	8003d3a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d12e      	bne.n	8003dd2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	e853 3f00 	ldrex	r3, [r3]
 8003d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f023 0310 	bic.w	r3, r3, #16
 8003d8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	6979      	ldr	r1, [r7, #20]
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	e841 2300 	strex	r3, r2, [r1]
 8003da4:	613b      	str	r3, [r7, #16]
   return(result);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1e6      	bne.n	8003d7a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	2b10      	cmp	r3, #16
 8003db8:	d103      	bne.n	8003dc2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2210      	movs	r2, #16
 8003dc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7fc fba2 	bl	8000514 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003dd0:	e00b      	b.n	8003dea <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fe fe52 	bl	8002a7c <HAL_UART_RxCpltCallback>
}
 8003dd8:	e007      	b.n	8003dea <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699a      	ldr	r2, [r3, #24]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0208 	orr.w	r2, r2, #8
 8003de8:	619a      	str	r2, [r3, #24]
}
 8003dea:	bf00      	nop
 8003dec:	3770      	adds	r7, #112	; 0x70
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40008000 	.word	0x40008000

08003df8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b0ac      	sub	sp, #176	; 0xb0
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003e06:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e2e:	2b22      	cmp	r3, #34	; 0x22
 8003e30:	f040 8182 	bne.w	8004138 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003e3a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003e3e:	e125      	b.n	800408c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e4a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8003e4e:	b2d9      	uxtb	r1, r3
 8003e50:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	400a      	ands	r2, r1
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003e86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d053      	beq.n	8003f3a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d011      	beq.n	8003ec2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8003e9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	f043 0201 	orr.w	r2, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d011      	beq.n	8003ef2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8003ece:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee8:	f043 0204 	orr.w	r2, r3, #4
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d011      	beq.n	8003f22 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8003efe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2204      	movs	r2, #4
 8003f10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f18:	f043 0202 	orr.w	r2, r3, #2
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d006      	beq.n	8003f3a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7fe fdaf 	bl	8002a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f040 80a2 	bne.w	800408c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f50:	e853 3f00 	ldrex	r3, [r3]
 8003f54:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8003f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f6c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003f70:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003f72:	e841 2300 	strex	r3, r2, [r1]
 8003f76:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8003f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1e4      	bne.n	8003f48 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3308      	adds	r3, #8
 8003f84:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8003f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3308      	adds	r3, #8
 8003fa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fa6:	66ba      	str	r2, [r7, #104]	; 0x68
 8003fa8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003fac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003fb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e1      	bne.n	8003f7e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a5f      	ldr	r2, [pc, #380]	; (8004150 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d021      	beq.n	800401c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d01a      	beq.n	800401c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ffa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004008:	657b      	str	r3, [r7, #84]	; 0x54
 800400a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800400e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e4      	bne.n	8003fe6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004020:	2b01      	cmp	r3, #1
 8004022:	d130      	bne.n	8004086 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403a:	f023 0310 	bic.w	r3, r3, #16
 800403e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800404c:	643b      	str	r3, [r7, #64]	; 0x40
 800404e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004052:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004054:	e841 2300 	strex	r3, r2, [r1]
 8004058:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e4      	bne.n	800402a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b10      	cmp	r3, #16
 800406c:	d103      	bne.n	8004076 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2210      	movs	r2, #16
 8004074:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800407c:	4619      	mov	r1, r3
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fc fa48 	bl	8000514 <HAL_UARTEx_RxEventCallback>
 8004084:	e002      	b.n	800408c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fe fcf8 	bl	8002a7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800408c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004090:	2b00      	cmp	r3, #0
 8004092:	d006      	beq.n	80040a2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004094:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	f47f aecf 	bne.w	8003e40 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80040a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80040ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d049      	beq.n	8004148 <UART_RxISR_8BIT_FIFOEN+0x350>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80040ba:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80040be:	429a      	cmp	r2, r3
 80040c0:	d242      	bcs.n	8004148 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3308      	adds	r3, #8
 80040c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3308      	adds	r3, #8
 80040e2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80040e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e3      	bne.n	80040c2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a15      	ldr	r2, [pc, #84]	; (8004154 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80040fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	60bb      	str	r3, [r7, #8]
   return(result);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f043 0320 	orr.w	r3, r3, #32
 8004114:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004122:	61bb      	str	r3, [r7, #24]
 8004124:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	6979      	ldr	r1, [r7, #20]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	613b      	str	r3, [r7, #16]
   return(result);
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e4      	bne.n	8004100 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004136:	e007      	b.n	8004148 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699a      	ldr	r2, [r3, #24]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0208 	orr.w	r2, r2, #8
 8004146:	619a      	str	r2, [r3, #24]
}
 8004148:	bf00      	nop
 800414a:	37b0      	adds	r7, #176	; 0xb0
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40008000 	.word	0x40008000
 8004154:	08003a89 	.word	0x08003a89

08004158 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b0ae      	sub	sp, #184	; 0xb8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004166:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800418e:	2b22      	cmp	r3, #34	; 0x22
 8004190:	f040 8186 	bne.w	80044a0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800419a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800419e:	e129      	b.n	80043f4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80041b2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80041b6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80041ba:	4013      	ands	r3, r2
 80041bc:	b29a      	uxth	r2, r3
 80041be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	1c9a      	adds	r2, r3, #2
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80041ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d053      	beq.n	800429e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d011      	beq.n	8004226 <UART_RxISR_16BIT_FIFOEN+0xce>
 8004202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00b      	beq.n	8004226 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2201      	movs	r2, #1
 8004214:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421c:	f043 0201 	orr.w	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004226:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d011      	beq.n	8004256 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004232:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00b      	beq.n	8004256 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2202      	movs	r2, #2
 8004244:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424c:	f043 0204 	orr.w	r2, r3, #4
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004256:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	d011      	beq.n	8004286 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004262:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00b      	beq.n	8004286 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2204      	movs	r2, #4
 8004274:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427c:	f043 0202 	orr.w	r2, r3, #2
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428c:	2b00      	cmp	r3, #0
 800428e:	d006      	beq.n	800429e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7fe fbfd 	bl	8002a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f040 80a4 	bne.w	80043f4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042d2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80042d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042da:	e841 2300 	strex	r3, r2, [r1]
 80042de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1e2      	bne.n	80042ac <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3308      	adds	r3, #8
 80042ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042f0:	e853 3f00 	ldrex	r3, [r3]
 80042f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3308      	adds	r3, #8
 800430a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800430e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004310:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004312:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004314:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800431c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e1      	bne.n	80042e6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a5f      	ldr	r2, [pc, #380]	; (80044b8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d021      	beq.n	8004384 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d01a      	beq.n	8004384 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800435c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800435e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004362:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004370:	65bb      	str	r3, [r7, #88]	; 0x58
 8004372:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004376:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800437e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e4      	bne.n	800434e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004388:	2b01      	cmp	r3, #1
 800438a:	d130      	bne.n	80043ee <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a2:	f023 0310 	bic.w	r3, r3, #16
 80043a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043b4:	647b      	str	r3, [r7, #68]	; 0x44
 80043b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043bc:	e841 2300 	strex	r3, r2, [r1]
 80043c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1e4      	bne.n	8004392 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d103      	bne.n	80043de <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2210      	movs	r2, #16
 80043dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80043e4:	4619      	mov	r1, r3
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fc f894 	bl	8000514 <HAL_UARTEx_RxEventCallback>
 80043ec:	e002      	b.n	80043f4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fe fb44 	bl	8002a7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80043f4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d006      	beq.n	800440a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80043fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	f47f aecb 	bne.w	80041a0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004410:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004414:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004418:	2b00      	cmp	r3, #0
 800441a:	d049      	beq.n	80044b0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004422:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004426:	429a      	cmp	r2, r3
 8004428:	d242      	bcs.n	80044b0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3308      	adds	r3, #8
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	623b      	str	r3, [r7, #32]
   return(result);
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3308      	adds	r3, #8
 800444a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800444e:	633a      	str	r2, [r7, #48]	; 0x30
 8004450:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e3      	bne.n	800442a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a15      	ldr	r2, [pc, #84]	; (80044bc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004466:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	60fb      	str	r3, [r7, #12]
   return(result);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f043 0320 	orr.w	r3, r3, #32
 800447c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800448a:	61fb      	str	r3, [r7, #28]
 800448c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	69b9      	ldr	r1, [r7, #24]
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	617b      	str	r3, [r7, #20]
   return(result);
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e4      	bne.n	8004468 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800449e:	e007      	b.n	80044b0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0208 	orr.w	r2, r2, #8
 80044ae:	619a      	str	r2, [r3, #24]
}
 80044b0:	bf00      	nop
 80044b2:	37b8      	adds	r7, #184	; 0xb8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40008000 	.word	0x40008000
 80044bc:	08003c41 	.word	0x08003c41

080044c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_UARTEx_DisableFifoMode+0x16>
 800450e:	2302      	movs	r3, #2
 8004510:	e027      	b.n	8004562 <HAL_UARTEx_DisableFifoMode+0x66>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2224      	movs	r2, #36	; 0x24
 800451e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004540:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004582:	2302      	movs	r3, #2
 8004584:	e02d      	b.n	80045e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2224      	movs	r2, #36	; 0x24
 8004592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0201 	bic.w	r2, r2, #1
 80045ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f8a0 	bl	8004708 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80045fe:	2302      	movs	r3, #2
 8004600:	e02d      	b.n	800465e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2224      	movs	r2, #36	; 0x24
 800460e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0201 	bic.w	r2, r2, #1
 8004628:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f862 	bl	8004708 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b08c      	sub	sp, #48	; 0x30
 800466a:	af00      	add	r7, sp, #0
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	4613      	mov	r3, r2
 8004672:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004680:	2b20      	cmp	r3, #32
 8004682:	d13b      	bne.n	80046fc <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 800468a:	88fb      	ldrh	r3, [r7, #6]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e034      	b.n	80046fe <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	671a      	str	r2, [r3, #112]	; 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	461a      	mov	r2, r3
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f7fe fe82 	bl	80033b0 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d11d      	bne.n	80046f0 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2210      	movs	r2, #16
 80046ba:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	e853 3f00 	ldrex	r3, [r3]
 80046c8:	617b      	str	r3, [r7, #20]
   return(result);
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f043 0310 	orr.w	r3, r3, #16
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
 80046dc:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	6a39      	ldr	r1, [r7, #32]
 80046e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1e6      	bne.n	80046bc <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 80046ee:	e002      	b.n	80046f6 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 80046f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80046fa:	e000      	b.n	80046fe <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 80046fc:	2302      	movs	r3, #2
  }
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3730      	adds	r7, #48	; 0x30
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004714:	2b00      	cmp	r3, #0
 8004716:	d108      	bne.n	800472a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004728:	e031      	b.n	800478e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800472a:	2308      	movs	r3, #8
 800472c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800472e:	2308      	movs	r3, #8
 8004730:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	0e5b      	lsrs	r3, r3, #25
 800473a:	b2db      	uxtb	r3, r3
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	0f5b      	lsrs	r3, r3, #29
 800474a:	b2db      	uxtb	r3, r3
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004752:	7bbb      	ldrb	r3, [r7, #14]
 8004754:	7b3a      	ldrb	r2, [r7, #12]
 8004756:	4911      	ldr	r1, [pc, #68]	; (800479c <UARTEx_SetNbDataToProcess+0x94>)
 8004758:	5c8a      	ldrb	r2, [r1, r2]
 800475a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800475e:	7b3a      	ldrb	r2, [r7, #12]
 8004760:	490f      	ldr	r1, [pc, #60]	; (80047a0 <UARTEx_SetNbDataToProcess+0x98>)
 8004762:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004764:	fb93 f3f2 	sdiv	r3, r3, r2
 8004768:	b29a      	uxth	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	7b7a      	ldrb	r2, [r7, #13]
 8004774:	4909      	ldr	r1, [pc, #36]	; (800479c <UARTEx_SetNbDataToProcess+0x94>)
 8004776:	5c8a      	ldrb	r2, [r1, r2]
 8004778:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800477c:	7b7a      	ldrb	r2, [r7, #13]
 800477e:	4908      	ldr	r1, [pc, #32]	; (80047a0 <UARTEx_SetNbDataToProcess+0x98>)
 8004780:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004782:	fb93 f3f2 	sdiv	r3, r3, r2
 8004786:	b29a      	uxth	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800478e:	bf00      	nop
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	08004860 	.word	0x08004860
 80047a0:	08004868 	.word	0x08004868

080047a4 <memset>:
 80047a4:	4402      	add	r2, r0
 80047a6:	4603      	mov	r3, r0
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d100      	bne.n	80047ae <memset+0xa>
 80047ac:	4770      	bx	lr
 80047ae:	f803 1b01 	strb.w	r1, [r3], #1
 80047b2:	e7f9      	b.n	80047a8 <memset+0x4>

080047b4 <__libc_init_array>:
 80047b4:	b570      	push	{r4, r5, r6, lr}
 80047b6:	4d0d      	ldr	r5, [pc, #52]	; (80047ec <__libc_init_array+0x38>)
 80047b8:	4c0d      	ldr	r4, [pc, #52]	; (80047f0 <__libc_init_array+0x3c>)
 80047ba:	1b64      	subs	r4, r4, r5
 80047bc:	10a4      	asrs	r4, r4, #2
 80047be:	2600      	movs	r6, #0
 80047c0:	42a6      	cmp	r6, r4
 80047c2:	d109      	bne.n	80047d8 <__libc_init_array+0x24>
 80047c4:	4d0b      	ldr	r5, [pc, #44]	; (80047f4 <__libc_init_array+0x40>)
 80047c6:	4c0c      	ldr	r4, [pc, #48]	; (80047f8 <__libc_init_array+0x44>)
 80047c8:	f000 f826 	bl	8004818 <_init>
 80047cc:	1b64      	subs	r4, r4, r5
 80047ce:	10a4      	asrs	r4, r4, #2
 80047d0:	2600      	movs	r6, #0
 80047d2:	42a6      	cmp	r6, r4
 80047d4:	d105      	bne.n	80047e2 <__libc_init_array+0x2e>
 80047d6:	bd70      	pop	{r4, r5, r6, pc}
 80047d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047dc:	4798      	blx	r3
 80047de:	3601      	adds	r6, #1
 80047e0:	e7ee      	b.n	80047c0 <__libc_init_array+0xc>
 80047e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e6:	4798      	blx	r3
 80047e8:	3601      	adds	r6, #1
 80047ea:	e7f2      	b.n	80047d2 <__libc_init_array+0x1e>
 80047ec:	08004878 	.word	0x08004878
 80047f0:	08004878 	.word	0x08004878
 80047f4:	08004878 	.word	0x08004878
 80047f8:	0800487c 	.word	0x0800487c

080047fc <memcpy>:
 80047fc:	440a      	add	r2, r1
 80047fe:	4291      	cmp	r1, r2
 8004800:	f100 33ff 	add.w	r3, r0, #4294967295
 8004804:	d100      	bne.n	8004808 <memcpy+0xc>
 8004806:	4770      	bx	lr
 8004808:	b510      	push	{r4, lr}
 800480a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800480e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004812:	4291      	cmp	r1, r2
 8004814:	d1f9      	bne.n	800480a <memcpy+0xe>
 8004816:	bd10      	pop	{r4, pc}

08004818 <_init>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	bf00      	nop
 800481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481e:	bc08      	pop	{r3}
 8004820:	469e      	mov	lr, r3
 8004822:	4770      	bx	lr

08004824 <_fini>:
 8004824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004826:	bf00      	nop
 8004828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482a:	bc08      	pop	{r3}
 800482c:	469e      	mov	lr, r3
 800482e:	4770      	bx	lr
